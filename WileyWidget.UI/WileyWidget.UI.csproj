<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
  <TargetFramework>net9.0-windows10.0.19041.0</TargetFramework>
    <RootNamespace>WileyWidget</RootNamespace>
    <AssemblyName>WileyWidget.UI</AssemblyName>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <UseWPF>true</UseWPF>
    <LangVersion>latest</LangVersion>

  <!-- Enable central package management and rely on Directory.Packages.props for versions -->
  <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>

    <!-- Enable package references during XAML markup compilation so wpftmp can access Prism -->
    <IncludePackageReferencesDuringMarkupCompilation>true</IncludePackageReferencesDuringMarkupCompilation>

    <!-- Allow wpftmp generation but ensure it inherits package references -->
    <GenerateTemporaryTargetAssembly>true</GenerateTemporaryTargetAssembly>
    <AlwaysCompileMarkupFilesInSeparateDomain>false</AlwaysCompileMarkupFilesInSeparateDomain>
    <XamlDebuggingInformation>false</XamlDebuggingInformation>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
  <NoWarn>$(NoWarn);NETSDK1206;NU1605;CS7022;CS8600;CS8601;CS8602;CS8603;CS8604;CS8618;CS8620;CS8622;CS8625;CS8632;CS8613;CS1061;CS1929;CA1416;CS0436</NoWarn>
  </PropertyGroup>  <ItemGroup>
  </ItemGroup>

  <!-- Guard: Fail early if Prism.Wpf is not resolved for WPF markup compilation (wpftmp)
       This prevents regressions where Prism.Regions appears missing because Prism.Wpf
       wasn't included in the temporary WPF compilation context.

       Prism packages are now defined in ROOT Directory.Build.targets to ensure
       all projects (including wpftmp temporary projects) inherit them via MSBuild's
       upward search mechanism. -->
  <PropertyGroup>
    <EnablePrismRegionsGuard>true</EnablePrismRegionsGuard>
  </PropertyGroup>
  <Target Name="ValidatePrismWpfForWpf" BeforeTargets="MarkupCompilePass1;CoreCompile" Condition=" '$(EnablePrismRegionsGuard)' == 'true' ">
    <ItemGroup>
      <_PrismWpfResolved Include="@(ReferencePath)" Condition=" '%(ReferencePath.Filename)' == 'Prism.Wpf' " />
    </ItemGroup>
    <Error Condition=" '@(_PrismWpfResolved)' == '' "
      Text="Prism.Wpf was not resolved for WPF compile. Verify ROOT Directory.Build.targets contains Prism.Wpf PackageReference and wpftmp projects can access it." />
  </Target>

  <!-- Force Prism references to be included in temporary XAML compilation project -->
  <!-- Microsoft-recommended approach: Pass resolved assemblies to wpftmp via ReferencePath -->
  <Target Name="IncludePrismInTemporaryAssembly" BeforeTargets="GenerateTemporaryTargetAssembly;MarkupCompilePass1" AfterTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <!-- Add all Prism assemblies to the reference path for wpftmp -->
      <_PrismAssemblies Include="@(ReferencePath)" Condition="'%(ReferencePath.NuGetPackageId)' == 'Prism.Wpf' OR '%(ReferencePath.NuGetPackageId)' == 'Prism.Core' OR '%(ReferencePath.NuGetPackageId)' == 'Prism.Container.DryIoc' OR '%(ReferencePath.Filename)' == 'DryIoc'" />
    </ItemGroup>
    <Message Text="Passing Prism assemblies to wpftmp: @(_PrismAssemblies)" Importance="high" />
    <!-- Ensure wpftmp gets these references -->
    <ItemGroup>
      <ReferencePath Include="@(_PrismAssemblies)" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <!-- Ensure sources belonging to other projects are not compiled into the UI assembly (avoid duplicate-type CS0436) -->
    <Compile Remove="..\WileyWidget.Services\**\*.cs" />
    <Compile Remove="..\WileyWidget.Webhooks\**\*.cs" />
    <Compile Remove="..\WileyWidget.Business\**\*.cs" />
    <Compile Remove="..\WileyWidget.Data\**\*.cs" />
    <Compile Remove="..\WileyWidget.Models\**\*.cs" />
    <!-- All versions explicitly specified - no CPM for wpftmp compatibility -->
    <PackageReference Include="BoldReports.WPF" />
    <PackageReference Include="Microsoft.ApplicationInsights" />
    <PackageReference Include="Microsoft.Xaml.Behaviors.Wpf" />
    <!-- Prism packages MUST have explicit versions for wpftmp -->
    <PackageReference Include="Prism.Core" />
    <PackageReference Include="Prism.Wpf" />
    <PackageReference Include="Prism.Container.DryIoc" />
    <!-- Entity Framework Core -->
    <PackageReference Include="Microsoft.EntityFrameworkCore" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Data.SqlClient" />
    <!-- Microsoft.Extensions -->
    <PackageReference Include="Microsoft.Extensions.Configuration.EnvironmentVariables" />
    <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" />
    <PackageReference Include="DotNetEnv" />
    <PackageReference Include="Microsoft.Extensions.Caching.Memory" />
    <PackageReference Include="Microsoft.Extensions.Hosting" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" />
    <PackageReference Include="Microsoft.Extensions.Http" />
    <PackageReference Include="Microsoft.Extensions.Logging" />
    <!-- Serilog -->
    <PackageReference Include="Serilog" />
    <PackageReference Include="Serilog.Enrichers.Environment" />
    <PackageReference Include="Serilog.Enrichers.Process" />
    <PackageReference Include="Serilog.Enrichers.Thread" />
    <PackageReference Include="Serilog.Settings.Configuration" />
    <PackageReference Include="Serilog.Sinks.Async" />
    <PackageReference Include="Serilog.Sinks.Email" />
    <PackageReference Include="Serilog.Sinks.File" />
    <!-- Syncfusion WPF Components -->
    <PackageReference Include="Syncfusion.Licensing" />
    <PackageReference Include="Syncfusion.SfBusyIndicator.WPF" />
    <PackageReference Include="Syncfusion.SfChart.WPF" />
    <PackageReference Include="Syncfusion.SfChat.WPF" />
    <PackageReference Include="Syncfusion.SfGauge.WPF" />
    <PackageReference Include="Syncfusion.SfGrid.WPF" />
    <PackageReference Include="Syncfusion.SfInput.WPF" />
    <PackageReference Include="Syncfusion.SfProgressBar.WPF" />
    <PackageReference Include="Syncfusion.SfRichTextBoxAdv.WPF" />
    <PackageReference Include="Syncfusion.SfSkinManager.WPF" />
    <PackageReference Include="Syncfusion.SfSpreadsheet.WPF" />
    <PackageReference Include="Syncfusion.SfTreeView.WPF" />
    <PackageReference Include="Syncfusion.SfGridCommon.WPF" />
    <PackageReference Include="Syncfusion.Shared.WPF" />
    <PackageReference Include="Syncfusion.Themes.FluentDark.WPF" />
    <PackageReference Include="Syncfusion.Themes.FluentLight.WPF" />
    <PackageReference Include="Syncfusion.Tools.WPF" />
    <PackageReference Include="Syncfusion.XlsIO.WPF" />
    <PackageReference Include="Syncfusion.Pdf.WPF" />
    <!-- Validation & Other -->
    <PackageReference Include="FluentValidation" />
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" PrivateAssets="all" />
    <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks.ResourceUtilization" />
    <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks.Common" />
    <PackageReference Include="System.Management" />
    <PackageReference Include="Polly" />
  <!-- AI Integration removed from UI project; move to dedicated AI integration module when ready -->
  <!-- QuickBooks Integration removed from UI project to reduce dependency bloat -->
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\WileyWidget.Business\WileyWidget.Business.csproj" />
    <ProjectReference Include="..\WileyWidget.Data\WileyWidget.Data.csproj" />
    <ProjectReference Include="..\WileyWidget.Models\WileyWidget.Models.csproj" />
    <ProjectReference Include="..\WileyWidget.Services\WileyWidget.Services.csproj" />
    <ProjectReference Include="..\WileyWidget.Abstractions\WileyWidget.Abstractions.csproj" />
  </ItemGroup>

  <!-- Add the built Services assembly to the ReferencePath for wpftmp when present.
       This helps the temporary XAML compilation project resolve service types
       without needing duplicate source definitions inside the UI project. -->
  <ItemGroup Condition="!Exists('$(MSBuildProjectDirectory)\..\WileyWidget.Services\WileyWidget.Services.csproj')">
    <!-- When the Services project is not present as a source ProjectReference (e.g., in binary-only builds),
         add the built Services assembly to the ReferencePath for wpftmp so XAML temporary compilation can resolve service types.
         During local development with the project present this block is skipped to avoid duplicate-type definitions. -->
    <_ServicesAssemblyPath Include="$(MSBuildProjectDirectory)\..\WileyWidget.Services\bin\$(Configuration)\$(TargetFramework)\WileyWidget.Services.dll" Condition="Exists('$(MSBuildProjectDirectory)\..\WileyWidget.Services\bin\$(Configuration)\$(TargetFramework)\WileyWidget.Services.dll')" />
    <ReferencePath Include="@(_ServicesAssemblyPath)" Condition="@(_ServicesAssemblyPath) != ''" />
  </ItemGroup>


  <!-- References to Prism assemblies are provided via PackageReference and central package management
    The custom MSBuild target above ensures wpftmp receives resolved assembly paths. -->
  <ItemGroup>
  <!-- Strings.Designer.cs is present under Resources/ and is included implicitly by the SDK -->
  <Compile Include="..\src\ThemeUtility.cs" />
    <!-- Converters now live in WileyWidget.UI\Converters\ and are auto-included by SDK -->
  <!-- Bootstrapper moved to dedicated WileyWidget.Startup project to avoid duplicate-type compilation -->
    <!-- Prism modules remain owned by the UI project (they reference views/viewmodels) -->
    <Compile Include="..\src\Startup\Modules\**\*.cs" />
  </ItemGroup>
  <!-- Clear VS designer cache after Clean to avoid stale designer/layout state -->
  <Target Name="ClearDesignerCache" AfterTargets="Clean">
    <Exec Command="del /Q /S $(ProjectDir)\obj\*.cache" />
  </Target>

  <!-- Add ProjectReference to newly created Startup project only if it's present in the workspace -->
  <ItemGroup Condition="Exists('$(MSBuildProjectDirectory)\..\WileyWidget.Startup\WileyWidget.Startup.csproj')">
    <ProjectReference Include="..\WileyWidget.Startup\WileyWidget.Startup.csproj" />
  </ItemGroup>

</Project>
