name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: windows-latest
    env:
      COVERAGE_MIN: 70   # Minimum required line coverage percentage (bumped from 60)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Build + Test (script)
        run: |
          $env:RUN_UI_TESTS='0'
          pwsh ./scripts/build.ps1 -Config Release

      - name: Install ReportGenerator
        run: dotnet tool update --global dotnet-reportgenerator-globaltool

      - name: List Coverage Files
        run: |
          Write-Host 'Listing discovered coverage.cobertura.xml files:'
          $files = Get-ChildItem -Recurse -Filter coverage.cobertura.xml | Select-Object FullName, Length, LastWriteTime
          if (-not $files) { Write-Host 'None found.' } else { $files | Format-Table | Out-String | Write-Host }

      - name: Generate Coverage Report (guarded)
        run: |
          $coverageFiles = Get-ChildItem -Recurse -Filter coverage.cobertura.xml | Select-Object -ExpandProperty FullName
          if (-not $coverageFiles) {
            Write-Host 'No coverage.cobertura.xml files found; skipping report generation.'
            exit 0
          }
          reportgenerator -reports:**/coverage.cobertura.xml -targetdir:CoverageReport -reporttypes:TextSummary;Html

      - name: Enforce Coverage Threshold
        run: |
          Write-Host "Enforcing minimum line coverage of $env:COVERAGE_MIN%"
          $summaryFile = Join-Path CoverageReport 'Summary.txt'
          if (-not (Test-Path $summaryFile)) { Write-Error "Coverage summary file not found: $summaryFile"; exit 1 }
          $line = (Get-Content $summaryFile | Where-Object { $_ -match 'Line coverage' })
          if (-not $line) { Write-Error "Could not find line coverage entry in summary"; exit 1 }
          if ($line -match '([0-9]+\.?[0-9]*)%') { $pct = [double]$matches[1] } else { Write-Error "Failed to parse coverage percentage"; exit 1 }
          Write-Host "Line coverage: $pct%"
          if ($pct -lt [double]$env:COVERAGE_MIN) { Write-Error "Coverage ${pct}% is below required $env:COVERAGE_MIN%"; exit 1 }
          Write-Host "Coverage threshold satisfied."

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: CoverageReport/**

      - name: Upload Build Diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-diagnostics
          path: |
            TestResults/msbuild.binlog
            TestResults/MSBuildDebug/**
            TestResults/MSBuildDebug.zip

      - name: UI Smoke (Category=UiSmokeTests)
        run: |
          echo "Running UI smoke tests (Category=UiSmokeTests)"
          taskkill /IM WileyWidget.exe /F || echo "No running WileyWidget.exe"
          taskkill /IM testhost.exe /F || echo "No running testhost.exe"
          taskkill /IM vstest.console.exe /F || echo "No running vstest.console.exe"
          dotnet test WileyWidget.sln --configuration Release --no-build --filter Category=UiSmokeTests --results-directory UiSmokeResults --no-parallel /p:UseSharedCompilation=false
          echo "UI smoke tests completed"

      - name: Publish Coverage Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            **/TestResults/*/coverage.cobertura.xml
            **/TestResults/*/*.trx
            UiSmokeResults/*/*.trx

      - name: Summary
        if: success()
        run: echo "Build & tests succeeded."
