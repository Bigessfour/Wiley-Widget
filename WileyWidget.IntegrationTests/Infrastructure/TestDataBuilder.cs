using System;
using System.Linq;
using WileyWidget.Models;

namespace WileyWidget.IntegrationTests.Infrastructure;

/// <summary>
/// Provides builder methods for creating test data entities.
/// </summary>
public static class TestDataBuilder
{
    /// <summary>
    /// Creates a sample MunicipalAccount with default values.
    /// </summary>
    public static MunicipalAccount CreateMunicipalAccount(
        string accountNumber = "405.1",
        string accountName = "Test Municipal Account",
        decimal budgetAmount = 10000.00m,
        int? departmentId = null,
        int? budgetPeriodId = null,
        AccountType? accountType = null)
    {
        // Determine appropriate account type based on account number if not specified
    var type = accountType ?? GetDefaultAccountTypeForNumber(accountNumber);

        return new MunicipalAccount
        {
            AccountNumber = new AccountNumber(accountNumber),
            Name = accountName,
            Balance = budgetAmount,
            Type = type,
            Fund = FundType.General,
            FundClass = FundClass.Governmental,
            DepartmentId = departmentId ?? 1,
            BudgetPeriodId = budgetPeriodId ?? 1,
            RowVersion = Array.Empty<byte>()
            // RowVersion will be auto-generated by SQL Server
        };
    }

    /// <summary>
    /// Gets the default account type for a given account number based on GASB ranges.
    /// </summary>
    private static AccountType GetDefaultAccountTypeForNumber(string accountNumber)
    {
        if (string.IsNullOrWhiteSpace(accountNumber))
            return AccountType.Cash;

        if (!TryGetAccountRootValue(accountNumber, out var accountNum))
            return AccountType.Cash;

        // Determine type based on account number ranges
        return accountNum switch
        {
            >= 100 and <= 199 => AccountType.Cash, // Assets
            >= 200 and <= 299 => AccountType.Payables, // Liabilities
            >= 300 and <= 399 => AccountType.FundBalance, // Equity
            >= 400 and <= 499 => AccountType.Revenue, // Revenues
            >= 500 and <= 699 => AccountType.Salaries, // Expenses
            >= 3000 and <= 3999 => AccountType.FundBalance, // Extended equity range for test accounts
            _ => AccountType.Cash // Default fallback
        };
    }

    private static bool TryGetAccountRootValue(string accountNumber, out int accountRoot)
    {
        accountRoot = 0;

        if (string.IsNullOrWhiteSpace(accountNumber))
            return false;

        var rootSegment = accountNumber.Split(new[] { '.', '-' }, StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();
        if (string.IsNullOrEmpty(rootSegment))
            return false;

        if (rootSegment.Length > 3)
        {
            rootSegment = rootSegment[..3];
        }

        return int.TryParse(rootSegment, out accountRoot);
    }

    /// <summary>
    /// Creates a sample Department.
    /// </summary>
    public static Department CreateDepartment(
        string name = "Test Department",
        string code = "TEST")
    {
        return new Department
        {
            Name = name,
            Code = code
        };
    }

    /// <summary>
    /// Creates a sample BudgetPeriod.
    /// </summary>
    public static BudgetPeriod CreateBudgetPeriod(
        int year = 2024,
        string name = "FY2024",
        BudgetStatus status = BudgetStatus.Adopted)
    {
        return new BudgetPeriod
        {
            Year = year,
            Name = name,
            Status = status,
            CreatedDate = DateTime.UtcNow
        };
    }

    /// <summary>
    /// Creates a sample Enterprise.
    /// </summary>
    public static Enterprise CreateEnterprise(
        string name = "Test Enterprise")
    {
        return new Enterprise
        {
            Name = name,
            CreatedDate = DateTime.UtcNow,
            RowVersion = new byte[8]
        };
    }

    /// <summary>
    /// Creates a sample BudgetEntry.
    /// </summary>
    public static BudgetEntry CreateBudgetEntry(
        int municipalAccountId,
        decimal amount = 1000.00m,
        int? budgetPeriodId = null)
    {
        return new BudgetEntry
        {
            MunicipalAccountId = municipalAccountId,
            Amount = amount,
            YearType = YearType.Current,
            EntryType = EntryType.Budget,
            BudgetPeriodId = budgetPeriodId ?? 1
        };
    }

    /// <summary>
    /// Creates a sample Transaction.
    /// </summary>
    public static Transaction CreateTransaction(
        int municipalAccountId,
        decimal amount,
        string description = "Test Transaction")
    {
        return new Transaction
        {
            MunicipalAccountId = municipalAccountId,
            Amount = amount,
            Description = description,
            TransactionDate = DateTime.UtcNow,
            Type = TransactionType.Debit
        };
    }

    /// <summary>
    /// Creates a sample Vendor.
    /// </summary>
    public static Vendor CreateVendor(string name = "Test Vendor")
    {
        return new Vendor
        {
            Name = name,
            IsActive = true
        };
    }

    /// <summary>
    /// Creates a sample Invoice.
    /// </summary>
    public static Invoice CreateInvoice(
        int vendorId,
        int municipalAccountId,
        decimal amount,
        string invoiceNumber = "INV-001")
    {
        return new Invoice
        {
            VendorId = vendorId,
            MunicipalAccountId = municipalAccountId,
            Amount = amount,
            InvoiceNumber = invoiceNumber,
            InvoiceDate = DateTime.UtcNow,
            DueDate = DateTime.UtcNow.AddDays(30)
        };
    }
}
