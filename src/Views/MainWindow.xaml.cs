using System.Windows;
using System.Windows.Input;
using System.Windows.Controls;
using System.Windows.Media;
using Syncfusion.SfSkinManager; // Theme manager
using Syncfusion.Windows.Shared; // Theme names (if needed)
using Syncfusion.UI.Xaml.Grid; // Grid controls
using Syncfusion.Windows.Tools.Controls; // Ribbon controls
using WileyWidget.Services;
using Serilog;
using System.Linq;
using Microsoft.Extensions.DependencyInjection;
using WileyWidget.ViewModels;
using System;
using System.Reflection;
using WileyWidget.Attributes;
using System.Diagnostics;
using System.Collections.Generic;
using System.Windows.Data;
using System.Windows.Media.Animation;
using System.Collections.Concurrent;

namespace WileyWidget;

/// <summary>
/// Primary shell window: applies persisted theme + window geometry, wires basic commands (theme switch, about),
/// and persists size/state on close. Keeps logic minimal—heavy operations belong in view models/services.
/// </summary>
public partial class MainWindow : RibbonWindow
{
    // Grid control field (automatically generated by WPF from XAML x:Name)
    // private Syncfusion.UI.Xaml.Grid.SfDataGrid Grid;

    // Ribbon button fields (automatically generated by WPF from XAML x:Name)
    // private dynamic BtnFluentDark;
    // private dynamic BtnFluentLight;
    // private dynamic BtnDynamicColumns;

    private readonly AuthenticationService? _authService;
    private readonly IServiceProvider? _serviceProvider;
    private IServiceScope? _viewScope; // keep scoped services alive for the window lifetime
    // Cache Enterprise property metadata to avoid repeated reflection when building dynamic columns
    private static readonly ConcurrentDictionary<Type, (PropertyInfo Prop, WileyWidget.Attributes.GridDisplayAttribute? Attr)[]> _columnPropertyCache = new();
    private readonly DateTime _startTime = DateTime.Now;

    private Syncfusion.UI.Xaml.Grid.SfDataGrid? GetDataGrid()
    {
        if (FindName("EnterpriseGrid") is Syncfusion.UI.Xaml.Grid.SfDataGrid primaryGrid)
        {
            return primaryGrid;
        }

        if (FindName("Grid") is Syncfusion.UI.Xaml.Grid.SfDataGrid legacyGrid)
        {
            return legacyGrid;
        }

        var namedGrid = FindVisualChild<Syncfusion.UI.Xaml.Grid.SfDataGrid>(this, "EnterpriseGrid");
        if (namedGrid != null)
        {
            return namedGrid;
        }

        return FindVisualChild<Syncfusion.UI.Xaml.Grid.SfDataGrid>(this, null);
    }

    private static T? FindVisualChild<T>(DependencyObject parent, string? name) where T : DependencyObject
    {
        if (parent == null)
        {
            return null;
        }

        for (var i = 0; i < VisualTreeHelper.GetChildrenCount(parent); i++)
        {
            var child = VisualTreeHelper.GetChild(parent, i);
            if (child is T typedChild)
            {
                if (name == null)
                {
                    return typedChild;
                }

                if (child is FrameworkElement frameworkElement && frameworkElement.Name == name)
                {
                    return typedChild;
                }
            }

            var descendant = FindVisualChild<T>(child, name);
            if (descendant != null)
            {
                return descendant;
            }
        }

        return null;
    }

    private void LogStartupControlStatus(ViewModels.MainViewModel viewModel, string windowLoadId)
    {
        try
        {
            if (FindName("MainRibbon") is Ribbon ribbon)
            {
                var itemsSourceType = ribbon.ItemsSource?.GetType().Name ?? "null";
                var ribbonItemCount = viewModel.RibbonItems?.Count ?? -1;
                var selectedItemDescription = ribbon.SelectedItem switch
                {
                    FrameworkElement element when !string.IsNullOrWhiteSpace(element.Name) => element.Name,
                    { } item => item.GetType().Name,
                    _ => "null"
                };

                Log.Information("Ribbon located - ItemsSourceType: {ItemsSourceType}, RibbonItems: {RibbonItemCount}, SelectedItem: {SelectedItem} - ID: {WindowLoadId}",
                    itemsSourceType,
                    ribbonItemCount,
                    selectedItemDescription,
                    windowLoadId);
            }
            else
            {
                Log.Warning("Ribbon control 'MainRibbon' not found during diagnostics - ID: {WindowLoadId}", windowLoadId);
            }
        }
        catch (Exception ribbonEx)
        {
            Log.Error(ribbonEx, "Failed to inspect ribbon status - ID: {WindowLoadId}", windowLoadId);
        }

        try
        {
            if (FindName("MainDockingManager") is DockingManager dockingManager)
            {
                var activeWindowDescription = dockingManager.ActiveWindow switch
                {
                    FrameworkElement element when !string.IsNullOrWhiteSpace(element.Name) => element.Name,
                    { } window => window.GetType().Name,
                    _ => "null"
                };

                var logicalChildren = new List<string>();
                foreach (var child in LogicalTreeHelper.GetChildren(dockingManager))
                {
                    if (child is FrameworkElement element)
                    {
                        var childName = string.IsNullOrWhiteSpace(element.Name)
                            ? element.GetType().Name
                            : $"{element.Name} ({element.GetType().Name})";
                        logicalChildren.Add(childName);
                    }
                }

                Log.Information("DockingManager located - ActiveWindow: {ActiveWindow}, LogicalChildren: {Children} - ID: {WindowLoadId}",
                    activeWindowDescription,
                    logicalChildren.Count == 0 ? "none" : string.Join(", ", logicalChildren),
                    windowLoadId);
            }
            else
            {
                Log.Warning("DockingManager 'MainDockingManager' not found during diagnostics - ID: {WindowLoadId}", windowLoadId);
            }
        }
        catch (Exception dockingEx)
        {
            Log.Error(dockingEx, "Failed to inspect docking manager status - ID: {WindowLoadId}", windowLoadId);
        }

        LogPanelStatus("WidgetsPanel", windowLoadId);
        LogPanelStatus("QuickBooksPanel", windowLoadId);
        LogPanelStatus("DashboardPanel", windowLoadId);

        // Enhanced WPF Rendering Diagnostics
        LogWpfRenderingStatus(windowLoadId);

        try
        {
            var grid = GetDataGrid();
            if (grid != null)
            {
                Log.Information("Enterprise grid located - ColumnCount: {ColumnCount}, ItemsSourceType: {ItemsSourceType}, AutoGenerateColumns: {AutoGenerateColumns} - ID: {WindowLoadId}",
                    grid.Columns.Count,
                    grid.ItemsSource?.GetType().Name ?? "null",
                    grid.AutoGenerateColumns,
                    windowLoadId);
            }
            else
            {
                Log.Warning("Enterprise grid not located during diagnostics - ID: {WindowLoadId}", windowLoadId);
            }
        }
        catch (Exception gridEx)
        {
            Log.Error(gridEx, "Failed to inspect enterprise grid status - ID: {WindowLoadId}", windowLoadId);
        }

        if (viewModel != null)
        {
            try
            {
                Log.Information("ViewModel datasets - Enterprises: {EnterpriseCount}, RibbonTabs: {RibbonCount}, QuickBooksTabs: {QuickBooksTabCount}, Widgets: {WidgetCount} - ID: {WindowLoadId}",
                    viewModel.Enterprises?.Count ?? -1,
                    viewModel.RibbonItems?.Count ?? -1,
                    viewModel.QuickBooksTabs?.Count ?? -1,
                    viewModel.Widgets?.Count ?? -1,
                    windowLoadId);
            }
            catch (Exception vmEx)
            {
                Log.Error(vmEx, "Failed to log ViewModel dataset counts - ID: {WindowLoadId}", windowLoadId);
            }
        }
    }

    private void LogPanelStatus(string panelName, string windowLoadId)
    {
        try
        {
            if (FindName(panelName) is ContentControl panel)
            {
                var contentType = panel.Content?.GetType().Name ?? "null";
                Log.Information("Panel '{PanelName}' located - ContentType: {ContentType}, IsVisible: {IsVisible} - ID: {WindowLoadId}",
                    panelName,
                    contentType,
                    panel.IsVisible,
                    windowLoadId);
            }
            else
            {
                Log.Warning("Panel '{PanelName}' not found during diagnostics - ID: {WindowLoadId}", panelName, windowLoadId);
            }
        }
        catch (Exception panelEx)
        {
            Log.Error(panelEx, "Failed to inspect panel '{PanelName}' - ID: {WindowLoadId}", panelName, windowLoadId);
        }
    }

    private void LogWpfRenderingStatus(string windowLoadId)
    {
        try
        {
            Log.Information("🎨 WPF RENDERING DIAGNOSTICS - ID: {WindowLoadId}", windowLoadId);

            // Window rendering status
            Log.Information("Window Status - Visibility: {Visibility}, IsLoaded: {IsLoaded}, IsVisible: {IsVisible}, ActualWidth: {Width}, ActualHeight: {Height} - ID: {WindowLoadId}",
                Visibility, IsLoaded, IsVisible, ActualWidth, ActualHeight, windowLoadId);

            // Check for rendering issues
            if (!IsVisible)
            {
                Log.Warning("❌ WINDOW NOT VISIBLE - checking for rendering blockers - ID: {WindowLoadId}", windowLoadId);
            }

            if (ActualWidth == 0 || ActualHeight == 0)
            {
                Log.Warning("❌ WINDOW HAS ZERO SIZE - ActualWidth: {Width}, ActualHeight: {Height} - ID: {WindowLoadId}",
                    ActualWidth, ActualHeight, windowLoadId);
            }

            // Check visual tree health
            var visualChildren = new List<string>();
            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(this); i++)
            {
                var child = VisualTreeHelper.GetChild(this, i);
                if (child is FrameworkElement fe)
                {
                    var status = fe.IsLoaded ? "Loaded" : "NotLoaded";
                    var visibility = fe.Visibility == Visibility.Visible ? "Visible" : fe.Visibility.ToString();
                    visualChildren.Add($"{fe.Name}({fe.GetType().Name}): {status}/{visibility}");
                }
            }

            Log.Information("Visual Tree Children: {Children} - ID: {WindowLoadId}",
                visualChildren.Count == 0 ? "none" : string.Join(", ", visualChildren), windowLoadId);

            // Check for layout issues
            if (double.IsNaN(Width) || double.IsNaN(Height))
            {
                Log.Warning("❌ WINDOW HAS NaN DIMENSIONS - Width: {Width}, Height: {Height} - ID: {WindowLoadId}",
                    Width, Height, windowLoadId);
            }

            // Check theme application
            try
            {
                var appliedTheme = SfSkinManager.GetVisualStyle(this);
                Log.Information("🎨 Syncfusion Theme Applied: {Theme} - ID: {WindowLoadId}", appliedTheme, windowLoadId);
            }
            catch (Exception themeEx)
            {
                Log.Error(themeEx, "Failed to get Syncfusion theme - ID: {WindowLoadId}", windowLoadId);
            }

            // Check for binding errors
            var bindingErrors = new List<string>();
            CheckForBindingErrors(this, bindingErrors);
            if (bindingErrors.Count > 0)
            {
                Log.Warning("🔗 BINDING ERRORS DETECTED: {Errors} - ID: {WindowLoadId}",
                    string.Join("; ", bindingErrors), windowLoadId);
            }

        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to perform WPF rendering diagnostics - ID: {WindowLoadId}", windowLoadId);
        }
    }

    private void CheckForBindingErrors(DependencyObject element, List<string> errors, int maxDepth = 5, int currentDepth = 0)
    {
        if (currentDepth > maxDepth) return;

        // Check this element's bindings
        var localValueEnumerator = element.GetLocalValueEnumerator();
        while (localValueEnumerator.MoveNext())
        {
            var entry = localValueEnumerator.Current;
            if (BindingOperations.IsDataBound(element, entry.Property))
            {
                var binding = BindingOperations.GetBinding(element, entry.Property);
                if (binding != null)
                {
                    var bindingExpression = BindingOperations.GetBindingExpression(element, entry.Property);
                    if (bindingExpression != null && bindingExpression.HasError)
                    {
                        errors.Add($"{element.GetType().Name}.{entry.Property.Name}: {bindingExpression.ValidationError?.ErrorContent ?? "Unknown binding error"}");
                    }
                }
            }
        }

        // Recursively check children
        for (int i = 0; i < VisualTreeHelper.GetChildrenCount(element); i++)
        {
            CheckForBindingErrors(VisualTreeHelper.GetChild(element, i), errors, maxDepth, currentDepth + 1);
        }
    }

    private Border? _debugOverlay;

    private void AddVisualDebugOverlay()
    {
        try
        {
            if (_debugOverlay != null)
            {
                return;
            }

            _debugOverlay = new Border
            {
                Background = new SolidColorBrush(Color.FromArgb(128, 255, 0, 0)), // Semi-transparent red
                BorderBrush = Brushes.Yellow,
                BorderThickness = new Thickness(2),
                CornerRadius = new CornerRadius(4),
                HorizontalAlignment = HorizontalAlignment.Stretch,
                VerticalAlignment = VerticalAlignment.Stretch,
                Margin = new Thickness(10),
                Visibility = Visibility.Collapsed
            };

            var debugText = new TextBlock
            {
                Text = "🔍 DEBUG MODE\nVisual elements should appear below this overlay\nIf you see this, WPF rendering is working",
                Foreground = Brushes.White,
                FontSize = 14,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center,
                VerticalAlignment = VerticalAlignment.Center,
                TextAlignment = TextAlignment.Center,
                Margin = new Thickness(20)
            };

            _debugOverlay.Child = debugText;

            void AttachOverlayToPanel(Panel panel)
            {
                Panel.SetZIndex(_debugOverlay, 9999);
                if (!panel.Children.Contains(_debugOverlay))
                {
                    panel.Children.Add(_debugOverlay);
                }
            }

            if (Content is Panel existingPanel)
            {
                AttachOverlayToPanel(existingPanel);
            }
            else
            {
                var currentContent = Content;
                Content = null;

                var hostGrid = new Grid();

                if (currentContent is UIElement element)
                {
                    hostGrid.Children.Add(element);
                }
                else if (currentContent != null)
                {
                    hostGrid.Children.Add(new ContentPresenter { Content = currentContent });
                }

                AttachOverlayToPanel(hostGrid);
                Content = hostGrid;
            }

            KeyDown += (s, e) =>
            {
                if (e.Key == Key.D && Keyboard.Modifiers == (ModifierKeys.Control | ModifierKeys.Shift))
                {
                    _debugOverlay.Visibility = _debugOverlay.Visibility == Visibility.Visible
                        ? Visibility.Collapsed
                        : Visibility.Visible;
                    Log.Information("🔍 Debug overlay toggled: {Visibility}", _debugOverlay.Visibility);
                    e.Handled = true;
                }
            };

            Log.Information("🔍 Visual debug overlay added - Press Ctrl+Shift+D to toggle");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to add visual debug overlay");
        }
    }

    // Keep a parameterless constructor for XAML/designer and legacy call sites
    public MainWindow()
    {
        var constructorTimer = Stopwatch.StartNew();
        App.LogDebugEvent("VIEW_INIT", "MainWindow constructor started");

        Log.Information("🏠 MainWindow constructor called - initializing main application window");
        Console.WriteLine("[MAINWINDOW] Constructor called");

        // CRITICAL: Set dummy DataContext BEFORE InitializeComponent to prevent binding failures
        // This prevents NullReferenceException during XAML loading when bindings try to access ViewModel properties
        DataContext = new object(); // Temporary dummy DataContext
        Log.Information("🔧 Set temporary DataContext to prevent XAML binding failures");

        // CRITICAL: Apply theme BEFORE InitializeComponent() to ensure XAML static resources resolve correctly
        // This prevents StaticResourceExtension failures and unthemed UI components
        try
        {
            var currentTheme = SettingsService.Instance.Current.Theme;
            Log.Information("🎨 Applying theme '{Theme}' before InitializeComponent to ensure static resource resolution", currentTheme);
            TryApplyTheme(currentTheme);
            Log.Information("� Theme '{Theme}' applied successfully before XAML loading", currentTheme);
        }
        catch (Exception themeEx)
        {
            Log.Warning(themeEx, "Failed to apply theme before InitializeComponent - UI may have incorrect styling");
            // Continue with initialization - TryApplyTheme has fallback logic
        }

        InitializeComponent();

        Log.Information("�🏠 MainWindow InitializeComponent completed in {ElapsedMs}ms", constructorTimer.ElapsedMilliseconds);

        // Try to resolve services from the global provider when available. If not available
        // we'll continue and let UpdateAuthenticationUI be defensive.
        Log.Debug("Attempting to resolve services from global provider");
        try
        {
            var provider = App.ServiceProvider;
            if (provider == null && Application.Current?.Properties?.Contains("ServiceProvider") == true)
            {
                provider = Application.Current.Properties["ServiceProvider"] as System.IServiceProvider;
                Log.Debug("Resolved service provider from Application.Current.Properties");
            }
            else if (provider != null)
            {
                Log.Debug("Resolved service provider from App.ServiceProvider");
            }

            _serviceProvider = provider;

            if (_serviceProvider != null)
            {
                Log.Debug("Service provider available, resolving AuthenticationService");
                try
                {
                    _authService = _serviceProvider.GetService<AuthenticationService>();
                    if (_authService != null)
                    {
                        Log.Debug("AuthenticationService resolved successfully, subscribing to events");
                        _authService.AuthenticationStateChanged += OnAuthenticationStateChanged;
                    }
                    else
                    {
                        Log.Warning("AuthenticationService not found in DI container");
                    }
                }
                catch (Exception innerEx)
                {
                    Log.Warning(innerEx, "Failed to resolve AuthenticationService from DI container during MainWindow construction");
                }
            }
            else
            {
                Log.Warning("No service provider available during MainWindow construction");
            }

            App.LogDebugEvent("VIEW_INIT", $"MainWindow services initialized in {constructorTimer.ElapsedMilliseconds}ms");
        }
        catch (Exception ex)
        {
            // Keep the constructor from crashing - log and continue; UpdateAuthenticationUI will be defensive
            Log.Error(ex, "Unexpected error during MainWindow construction service resolution");
        }
        // Dynamic columns will be built when DataContext is set in OnWindowLoaded
        RestoreWindowState();
        Loaded += OnWindowLoaded;
        ContentRendered += OnWindowContentRendered;
        Closing += OnWindowClosing;
        KeyDown += OnKeyDown;
        UpdateThemeToggleVisuals();

        // Ensure window is visible
        Visibility = Visibility.Visible;
        ShowInTaskbar = true;

        // Enhanced logging for view rendering diagnostics
        Log.Information("🎨 WINDOW VISIBILITY: Visibility={Visibility}, ShowInTaskbar={ShowInTaskbar}, WindowState={WindowState}",
            Visibility, ShowInTaskbar, WindowState);
        Log.Information("📐 WINDOW DIMENSIONS: Width={Width}, Height={Height}, ActualWidth={ActualWidth}, ActualHeight={ActualHeight}",
            Width, Height, ActualWidth, ActualHeight);

        // Verify WPF visual tree is accessible
        try
        {
            var visualTreeRoot = this as System.Windows.Media.Visual;
            Log.Information("🎨 VISUAL TREE: Root visual accessible, type={VisualType}", visualTreeRoot.GetType().Name);
        }
        catch (Exception visualEx)
        {
            Log.Error(visualEx, "🎨 VISUAL TREE ERROR: Failed to access WPF visual tree");
        }

        constructorTimer.Stop();
        App.LogDebugEvent("VIEW_INIT", $"MainWindow constructor completed in {constructorTimer.ElapsedMilliseconds}ms");
        App.LogStartupTiming("MainWindow Constructor", constructorTimer.Elapsed);
    }

    private async void OnWindowLoaded(object sender, RoutedEventArgs e)
    {
        var loadTimer = Stopwatch.StartNew();
        var windowLoadId = Guid.NewGuid().ToString("N")[..8];

        Console.WriteLine("[MAINWINDOW] OnWindowLoaded started");
        Log.Information("=== MAIN WINDOW LOADED EVENT STARTED ===");
        Log.Information("Window Load ID: {WindowLoadId}, Thread: {ThreadId}, Window Title: '{Title}'",
            windowLoadId, Environment.CurrentManagedThreadId, Title);
        App.LogDebugEvent("VIEW_INIT", $"MainWindow.OnWindowLoaded started - ID: {windowLoadId}");

        // Ensure window is activated and visible
        try
        {
            Activate();
            Focus();
            Log.Information("MainWindow activated and focused - ID: {WindowLoadId}", windowLoadId);
        }
        catch (Exception ex)
        {
            Log.Warning(ex, "Failed to activate/focus MainWindow - ID: {WindowLoadId}", windowLoadId);
        }

        // Initialize DataContext with scoped services when window is loaded
        Log.Debug("Starting DataContext initialization - ID: {WindowLoadId}", windowLoadId);
        try
        {
            if (_serviceProvider == null)
            {
                throw new InvalidOperationException("Service provider is not available. Cannot initialize MainViewModel.");
            }

            Log.Debug("Creating service scope - ID: {WindowLoadId}", windowLoadId);
            _viewScope = _serviceProvider.CreateScope();
            Log.Debug("Service scope created, resolving MainViewModel - ID: {WindowLoadId}", windowLoadId);
            var mainViewModel = _viewScope.ServiceProvider.GetRequiredService<ViewModels.MainViewModel>();
            Log.Information("MainViewModel created: {ViewModelType} - ID: {WindowLoadId}",
                mainViewModel.GetType().Name, windowLoadId);

            Log.Debug("Setting DataContext to MainViewModel - ID: {WindowLoadId}", windowLoadId);
            DataContext = mainViewModel;
            Log.Information("DataContext set successfully - ID: {WindowLoadId}", windowLoadId);
            App.LogDebugEvent("VIEW_INIT", $"DataContext set, configuring ViewModel properties - ID: {windowLoadId}");

            // Subscribe to property changes to handle dynamic column toggling
            Log.Debug("Subscribing to ViewModel events - ID: {WindowLoadId}", windowLoadId);
            mainViewModel.PropertyChanged += OnViewModelPropertyChanged;
            mainViewModel.NavigationRequested += OnViewModelNavigationRequested;
            Log.Information("ViewModel event subscriptions completed - ID: {WindowLoadId}", windowLoadId);

            Log.Information("Initializing MainViewModel data asynchronously - ID: {WindowLoadId}", windowLoadId);
            await mainViewModel.InitializeAsync();
            Log.Information("MainViewModel initialization finished - ID: {WindowLoadId}", windowLoadId);

            // Find and configure docking manager
            var dockingManager = FindName("MainDockingManager") as DockingManager;
            if (dockingManager != null)
            {
                Log.Information("Found DockingManager, subscribing to ActiveWindowChanged - ID: {WindowLoadId}", windowLoadId);
                dockingManager.ActiveWindowChanged += OnDockingActiveWindowChanged;
                Log.Information("DockingManager configured successfully - ID: {WindowLoadId}", windowLoadId);
            }
            else
            {
                Log.Error("DockingManager not found in visual tree - ID: {WindowLoadId}", windowLoadId);
                // Try to list all named elements for debugging
                Log.Error("Available named elements: {ElementNames}", string.Join(", ", GetAllNamedElements()));
            }

            LogStartupControlStatus(mainViewModel, windowLoadId);

            // Load and apply the persisted column mode preference
            Log.Information("Applying persisted settings - ID: {WindowLoadId}", windowLoadId);
            mainViewModel.UseDynamicColumns = SettingsService.Instance.Current.UseDynamicColumns;
            Log.Information("UseDynamicColumns set to {UseDynamic} - ID: {WindowLoadId}",
                mainViewModel.UseDynamicColumns, windowLoadId);

            // Now that DataContext and visual tree are ready, apply maximized state and auth UI
            Log.Information("Applying window state and authentication UI - ID: {WindowLoadId}", windowLoadId);
            App.LogDebugEvent("VIEW_INIT", $"Applying window state and authentication UI - ID: {windowLoadId}");
            ApplyMaximized();
            await UpdateAuthenticationUIAsyncInternal();

            // Try silent authentication if user might already be signed in
            if (_authService != null && !_authService.IsAuthenticated)
            {
                Log.Information("🔐 Attempting silent authentication on startup - ID: {WindowLoadId}", windowLoadId);
                try
                {
                    // Silent sign-in removed - use explicit SignInAsync if needed
                    Log.Information("🔐 Silent authentication not available - user will need to sign in manually - ID: {WindowLoadId}", windowLoadId);
                }
                catch (Exception ex)
                {
                    Log.Warning(ex, "🔐 Silent authentication failed on startup - ID: {WindowLoadId}", windowLoadId);
                }
            }

            Log.Information("Window state and authentication UI applied - ID: {WindowLoadId}", windowLoadId);

            // Verify data binding is working
            Log.Information("🔗 DATABINDING VERIFICATION - ID: {WindowLoadId}", windowLoadId);
            if (DataContext is ViewModels.MainViewModel vm)
            {
                Log.Information("ViewModel properties - Enterprises.Count: {Count}, CurrentUserName: '{UserName}', IsLoading: {IsLoading}",
                    vm.Enterprises?.Count ?? -1, vm.CurrentUserName ?? "null", vm.IsLoading);
            }
            else
            {
                Log.Error("DataContext is not MainViewModel - actual type: {Type}", DataContext?.GetType().Name ?? "null");
            }

            // Validate theme was applied correctly and log any static resource issues
            try
            {
                var appliedTheme = SfSkinManager.GetVisualStyle(this);
                var expectedTheme = Services.ThemeUtility.NormalizeTheme(SettingsService.Instance.Current.Theme);
                Log.Information("🎨 Theme validation - Applied: {Applied}, Expected: {Expected} - ID: {WindowLoadId}", 
                    appliedTheme, expectedTheme, windowLoadId);
                
                if (appliedTheme.ToString() != expectedTheme)
                {
                    Log.Warning("🎨 Theme mismatch detected! Applied theme '{Applied}' does not match expected '{Expected}' - static resources may fail - ID: {WindowLoadId}", 
                        appliedTheme, expectedTheme, windowLoadId);
                }

                // Test static resource access to catch early failures
                try
                {
                    var testResource = TryFindResource("PrimaryBrush") ?? TryFindResource("AccentBrush");
                    Log.Information("🎨 Static resource test passed - found resource of type {ResourceType} - ID: {WindowLoadId}", 
                        testResource?.GetType().Name ?? "null", windowLoadId);
                }
                catch (Exception resourceEx)
                {
                    Log.Warning(resourceEx, "🎨 Static resource resolution failed - theme-dependent XAML resources may not load correctly - ID: {WindowLoadId}", windowLoadId);
                }
            }
            catch (Exception themeValidationEx)
            {
                Log.Warning(themeValidationEx, "🎨 Failed to validate theme application - ID: {WindowLoadId}", windowLoadId);
            }

            // Initialize grid columns based on current setting
            var grid = GetDataGrid();
            if (grid != null)
            {
                Log.Information("Initializing grid columns, UseDynamicColumns: {UseDynamic} - ID: {WindowLoadId}",
                    mainViewModel.UseDynamicColumns, windowLoadId);
                App.LogDebugEvent("VIEW_INIT", $"Initializing grid columns - ID: {windowLoadId}");
                if (mainViewModel.UseDynamicColumns)
                {
                    Log.Information("Building dynamic columns - ID: {WindowLoadId}", windowLoadId);
                    BuildDynamicColumns();
                    App.LogDebugEvent("VIEW_INIT", $"Dynamic columns built - ID: {windowLoadId}");
                }
                else
                {
                    Log.Information("Adding static columns - ID: {WindowLoadId}", windowLoadId);
                    grid.AutoGenerateColumns = false;
                    grid.Columns.Clear();
                    AddStaticColumns(grid);
                    App.LogDebugEvent("VIEW_INIT", $"Static columns added - ID: {windowLoadId}");
                }
                Log.Information("Grid columns initialized successfully - ID: {WindowLoadId}", windowLoadId);
            }
            else
            {
                Log.Warning("DataGrid not found, cannot initialize columns - ID: {WindowLoadId}", windowLoadId);
            }

            // Activate the default docking panel (Municipal Enterprises) to ensure MainWindow content is visible
            Log.Information("=== ACTIVATING DEFAULT DOCKING PANEL ===");
            Log.Information("Activating WidgetsPanel as default view - ID: {WindowLoadId}", windowLoadId);
            App.LogDebugEvent("VIEW_INIT", $"Activating default docking panel - ID: {windowLoadId}");
            ActivateDockingPanel("WidgetsPanel");

            // Force window display and activation
            Log.Information("🖥️ FORCING WINDOW DISPLAY - ID: {WindowLoadId}", windowLoadId);
            try
            {
                this.Show();
                this.Activate();
                this.Topmost = true;
                await System.Threading.Tasks.Task.Delay(100); // Brief delay to ensure display
                this.Topmost = false;
                this.Focus();

                Log.Information("✅ WINDOW DISPLAY FORCED: Visible={Visible}, IsActive={IsActive}, Topmost={Topmost} - ID: {WindowLoadId}",
                    this.Visibility == Visibility.Visible, this.IsActive, this.Topmost, windowLoadId);
            }
            catch (Exception displayEx)
            {
                Log.Error(displayEx, "❌ FAILED TO FORCE WINDOW DISPLAY - ID: {WindowLoadId}", windowLoadId);
            }

            // Add visual debug overlay for troubleshooting
            AddVisualDebugOverlay();

            loadTimer.Stop();
            Log.Information("=== MAIN WINDOW INITIALIZATION COMPLETED SUCCESSFULLY ===");
            Log.Information("Total initialization time: {TotalElapsedMs}ms - ID: {WindowLoadId}",
                loadTimer.ElapsedMilliseconds, windowLoadId);
            App.LogDebugEvent("VIEW_INIT", $"MainWindow.OnWindowLoaded completed in {loadTimer.ElapsedMilliseconds}ms - ID: {windowLoadId}");
            App.LogStartupTiming("MainWindow OnWindowLoaded", loadTimer.Elapsed);
            Log.Information("MainWindow loaded and initialized successfully - ID: {WindowLoadId}", windowLoadId);
        }
        catch (Exception ex)
        {
            loadTimer.Stop();
            Log.Error(ex, "CRITICAL ERROR during MainWindow initialization - ID: {WindowLoadId}", windowLoadId);
            App.LogDebugEvent("VIEW_INIT_ERROR", $"MainWindow initialization failed: {ex.Message} - ID: {windowLoadId}");

            // Show user-friendly error dialog
            ShowCriticalErrorDialog(
                "Application Initialization Failed",
                "The application failed to initialize properly. Some features may not work correctly.",
                $"Error: {ex.Message}\n\nCheck the application logs for more details.\n\nWindow Load ID: {windowLoadId}");

            // Continue with partial initialization if possible
            try
            {
                this.Show();
                this.Activate();
                Log.Warning("Attempting to show window despite initialization errors - ID: {WindowLoadId}", windowLoadId);
            }
            catch (Exception showEx)
            {
                Log.Error(showEx, "Failed to show window after initialization error - ID: {WindowLoadId}", windowLoadId);
            }
        }
    }

    /// <summary>
    /// MICROSOFT WPF LIFECYCLE: ContentRendered event
    /// Called after the window content has been rendered and is visible to the user.
    /// This is the proper place for post-UI initialization according to Microsoft documentation.
    /// Per MS docs: "When the window is initialized, the SourceInitialized event is raised and the window is shown."
    /// ContentRendered fires after all content is rendered to the screen.
    /// </summary>
    private async void OnWindowContentRendered(object? sender, EventArgs e)
    {
        var renderTimer = Stopwatch.StartNew();
        var renderId = Guid.NewGuid().ToString("N")[..8];

        Log.Information("=== MAIN WINDOW CONTENT RENDERED - ID: {RenderId} ===", renderId);
        App.LogDebugEvent("VIEW_RENDER", $"MainWindow.ContentRendered started - ID: {renderId}");

        try
        {
            // Verify MainViewModel is initialized and has data
            if (DataContext is ViewModels.MainViewModel viewModel)
            {
                Log.Information("✅ Verifying ViewModel initialization - RibbonItems: {RibbonCount}, Enterprises: {EnterpriseCount}",
                    viewModel.RibbonItems?.Count ?? 0,
                    viewModel.Enterprises?.Count ?? 0);

                // Ensure all view panels are properly bound and visible
                await EnsureViewPanelsInitialized(viewModel, renderId);

                // Log final rendering diagnostics
                LogStartupControlStatus(viewModel, renderId);
            }
            else
            {
                Log.Warning("⚠ DataContext is not MainViewModel after ContentRendered - Type: {DataContextType}",
                    DataContext?.GetType().Name ?? "null");
            }

            renderTimer.Stop();
            Log.Information("=== MAIN WINDOW CONTENT RENDERED COMPLETED in {ElapsedMs}ms - ID: {RenderId} ===",
                renderTimer.ElapsedMilliseconds, renderId);
            App.LogStartupTiming("MainWindow ContentRendered", renderTimer.Elapsed);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "❌ Error during MainWindow ContentRendered - ID: {RenderId}", renderId);
            App.LogDebugEvent("VIEW_RENDER_ERROR", $"ContentRendered failed: {ex.Message}");
        }
    }

    /// <summary>
    /// Ensures all designed view panels are properly initialized and their DataContext is set.
    /// Follows Syncfusion DockingManager and WPF DataTemplate best practices.
    /// Per Syncfusion docs: DockingManager children should be ContentControls with DataContext bound to ViewModels.
    /// </summary>
    private async Task EnsureViewPanelsInitialized(ViewModels.MainViewModel viewModel, string correlationId)
    {
        ArgumentNullException.ThrowIfNull(viewModel);
        
        Log.Information("🔧 Starting view panel initialization - ID: {CorrelationId}", correlationId);
        
        try
        {
            // Find DockingManager - per Syncfusion documentation
            var dockingManager = FindName("MainDockingManager") as DockingManager;
            if (dockingManager == null)
            {
                Log.Warning("⚠ DockingManager 'MainDockingManager' not found - views may not display correctly - ID: {CorrelationId}", correlationId);
                return;
            }

            Log.Information("✅ DockingManager found with {ChildCount} children - ID: {CorrelationId}",
                dockingManager.Children.Count, correlationId);

            // Ensure each view panel has proper DataContext from MainViewModel
            // Per WPF DataTemplate documentation: ContentControl.Content will use DataTemplate based on DataContext type
            await InitializeViewPanel("DashboardPanel", viewModel.DashboardViewModel, correlationId);
            await InitializeViewPanel("EnterprisePanel", viewModel.EnterpriseViewModel, correlationId);
            await InitializeViewPanel("BudgetPanel", viewModel.BudgetViewModel, correlationId);
            await InitializeViewPanel("AIAssistPanel", viewModel.AIAssistViewModel, correlationId);
            await InitializeViewPanel("SettingsPanel", viewModel.SettingsViewModel, correlationId);
            await InitializeViewPanel("ToolsPanel", viewModel.ToolsViewModel, correlationId);

            // Force layout update to ensure all views are rendered
            // Per Microsoft WPF documentation: UpdateLayout() forces layout pass
            await Dispatcher.InvokeAsync(() =>
            {
                dockingManager.UpdateLayout();
                this.UpdateLayout();
                Log.Debug("📐 Layout update forced for DockingManager and MainWindow - ID: {CorrelationId}", correlationId);
            }, System.Windows.Threading.DispatcherPriority.Loaded);

            Log.Information("✅ All view panels initialized successfully - ID: {CorrelationId}", correlationId);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "❌ Failed to initialize view panels - ID: {CorrelationId}", correlationId);
        }
    }

    /// <summary>
    /// Initializes a specific view panel by finding it and setting its DataContext.
    /// Per Microsoft WPF documentation: DataContext flows down the visual tree automatically,
    /// but we explicitly set it here to ensure proper ViewModel binding.
    /// </summary>
    private async Task InitializeViewPanel(string panelName, object? viewModelInstance, string correlationId)
    {
        try
        {
            await Dispatcher.InvokeAsync(() =>
            {
                var panel = FindName(panelName) as ContentControl;
                if (panel != null)
                {
                    if (viewModelInstance != null)
                    {
                        // Set DataContext - WPF DataTemplate will automatically create the appropriate view
                        panel.DataContext = viewModelInstance;
                        Log.Debug("✅ Panel '{PanelName}' DataContext set to {ViewModelType} - ID: {CorrelationId}",
                            panelName, viewModelInstance.GetType().Name, correlationId);
                    }
                    else
                    {
                        Log.Warning("⚠ Panel '{PanelName}' ViewModel is null - ID: {CorrelationId}",
                            panelName, correlationId);
                    }

                    // Ensure panel is visible
                    if (panel.Visibility != Visibility.Visible)
                    {
                        panel.Visibility = Visibility.Visible;
                        Log.Debug("👁 Panel '{PanelName}' visibility set to Visible - ID: {CorrelationId}",
                            panelName, correlationId);
                    }

                    // Verify Content was created by DataTemplate
                    if (panel.Content != null)
                    {
                        Log.Debug("✅ Panel '{PanelName}' Content created: {ContentType} - ID: {CorrelationId}",
                            panelName, panel.Content.GetType().Name, correlationId);
                    }
                    else
                    {
                        Log.Warning("⚠ Panel '{PanelName}' Content is null after DataContext set - DataTemplate may not be working - ID: {CorrelationId}",
                            panelName, correlationId);
                    }
                }
                else
                {
                    Log.Warning("⚠ Panel '{PanelName}' not found in XAML (via FindName) - ID: {CorrelationId}",
                        panelName, correlationId);
                }
            }, System.Windows.Threading.DispatcherPriority.Normal);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "❌ Failed to initialize panel '{PanelName}' - ID: {CorrelationId}",
                panelName, correlationId);
        }
    }

    private void OnViewModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        ArgumentNullException.ThrowIfNull(e);
        if (e.PropertyName == nameof(ViewModels.MainViewModel.UseDynamicColumns))
        {
            var vm = DataContext as ViewModels.MainViewModel;
            var grid = GetDataGrid();
            if (grid == null) return;

            // Persist the column mode preference
            SettingsService.Instance.Current.UseDynamicColumns = vm?.UseDynamicColumns ?? false;
            SettingsService.Instance.Save();

            if (vm?.UseDynamicColumns == true)
            {
                BuildDynamicColumns();
            }
            else
            {
                // Switch back to static columns defined in XAML
                grid.AutoGenerateColumns = false;
                grid.Columns.Clear();
                
                // Re-add the static columns
                AddStaticColumns(grid);
            }
        }
    }

    private void AddStaticColumns(Syncfusion.UI.Xaml.Grid.SfDataGrid grid)
    {
        // Add the static columns back - unified set based on Enterprise model
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridTextColumn { HeaderText = "Id", MappingName = "Id", Width = 60 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridTextColumn { HeaderText = "Name", MappingName = "Name", Width = 150 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridTextColumn { HeaderText = "Type", MappingName = "Type", Width = 100 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Current Rate", MappingName = "CurrentRate", NumberDecimalDigits = 2, Width = 100 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Citizens Served", MappingName = "CitizenCount", NumberDecimalDigits = 0, Width = 120 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Monthly Expenses", MappingName = "MonthlyExpenses", NumberDecimalDigits = 2, Width = 130 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Annual Budget", MappingName = "TotalBudget", NumberDecimalDigits = 2, Width = 120 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Monthly Revenue", MappingName = "MonthlyRevenue", NumberDecimalDigits = 2, Width = 130 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Monthly Balance", MappingName = "MonthlyBalance", NumberDecimalDigits = 2, Width = 120 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridTextColumn { HeaderText = "Notes", MappingName = "Notes", Width = 200 });
    }

    /// <summary>
    /// Dynamically builds columns for each public property of the Enterprise model when enabled.
    /// Supports different column types based on property types and includes proper formatting.
    /// </summary>
    private void BuildDynamicColumns()
    {
        try
        {
            var vm = DataContext as ViewModels.MainViewModel;
            var grid = GetDataGrid();
            if (grid == null) return;

            grid.AutoGenerateColumns = false;
            grid.Columns.Clear();

            // Get the Enterprise type to build columns from its properties (cached)
            var enterpriseType = typeof(WileyWidget.Models.Enterprise);
            var properties = _columnPropertyCache.GetOrAdd(enterpriseType, t =>
            {
                return t.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                    .Where(p => p.CanRead && p.GetGetMethod() != null && !p.GetGetMethod()!.IsVirtual) // Exclude navigation/navigation-like
                    .Select(p => (
                        Prop: p,
                        Attr: p.GetCustomAttribute(typeof(WileyWidget.Attributes.GridDisplayAttribute)) as WileyWidget.Attributes.GridDisplayAttribute
                    ))
                    .Where(x => x.Attr?.Visible != false) // Exclude properties marked as not visible
                    .OrderBy(x => x.Attr?.Order ?? 50)
                    .ToArray();
            });

            var hadPropertyErrors = false;
            foreach (var entry in properties)
            {
                try
                {
                    var prop = entry.Prop;
                    if (prop == null) continue;
                    var displayAttr = entry.Attr;
                    var mappingName = prop.Name;
                    var headerText = displayAttr?.HeaderText ?? SplitCamelCase(prop.Name);

                    // Create appropriate column type based on property type
                    var column = CreateColumnForProperty(prop, mappingName, headerText, displayAttr);
                    if (column != null)
                    {
                        grid.Columns.Add(column);
                    }
                }
                catch (Exception propEx)
                {
                    hadPropertyErrors = true;
                    Log.Warning(propEx, "Dynamic column creation failed for property {Property}", entry.Prop?.Name);
                }
            }

            if (hadPropertyErrors)
            {
                Log.Warning("One or more properties failed to generate dynamic columns; remaining columns were loaded");
            }

            Log.Information("Dynamic columns built successfully for {TypeName} with {ColumnCount} columns", 
                           enterpriseType.Name, grid.Columns.Count);
        }
        catch (Exception ex)
        {
            ErrorReportingService.Instance.ReportError(ex, "Grid_BuildDynamicColumns", showToUser: false);
            
            // Fallback to static columns with user notification
            var grid = GetDataGrid();
            if (grid != null) 
            {
                grid.AutoGenerateColumns = false;
                grid.Columns.Clear();
                AddStaticColumns(grid);
                Log.Warning("Fallback to static columns due to dynamic column build failure");
                
                // Show user-friendly message
                MessageBox.Show(
                    "Unable to display custom column layout. Using default column layout instead.\n\n" +
                    "Some advanced features may not be available.",
                    "Column Layout Fallback",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
            }
        }
    }



    /// <summary>
    /// Creates the appropriate Syncfusion column type based on the property type
    /// </summary>
    private Syncfusion.UI.Xaml.Grid.GridColumn? CreateColumnForProperty(System.Reflection.PropertyInfo prop, string mappingName, string headerText, WileyWidget.Attributes.GridDisplayAttribute? displayAttr = null)
    {
        var propType = prop.PropertyType;

        // Handle nullable types
        var underlyingType = Nullable.GetUnderlyingType(propType) ?? propType;

        // Skip complex types that aren't suitable for columns
        if (underlyingType.IsClass && underlyingType != typeof(string))
        {
            return null; // Skip navigation properties and complex objects
        }

        // Handle enums using a ComboBox column
        if (underlyingType.IsEnum)
        {
            try
            {
                return new GridComboBoxColumn
                {
                    MappingName = mappingName,
                    HeaderText = headerText,
                    ItemsSource = Enum.GetValues(underlyingType),
                    Width = displayAttr?.Width ?? 120,
                    AllowSorting = true,
                    AllowFiltering = true
                };
            }
            catch (Exception ex)
            {
                Log.Warning(ex, "Failed to create enum ComboBox column for {Property}", mappingName);
            }
        }

        if (underlyingType == typeof(int) || underlyingType == typeof(long) ||
            underlyingType == typeof(short) || underlyingType == typeof(byte))
        {
            return new GridNumericColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                NumberDecimalDigits = displayAttr?.DecimalDigits >= 0 ? displayAttr.DecimalDigits : 0,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true
            };
        }
        else if (underlyingType == typeof(decimal))
        {
            return new GridNumericColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                NumberDecimalDigits = displayAttr?.DecimalDigits >= 0 ? displayAttr.DecimalDigits : 2,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true
            };
        }
        else if (underlyingType == typeof(double) || underlyingType == typeof(float))
        {
            return new GridNumericColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                NumberDecimalDigits = displayAttr?.DecimalDigits ?? 2,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true
            };
        }
        else if (underlyingType == typeof(DateTime))
        {
            return new GridDateTimeColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true
            };
        }
        else if (underlyingType == typeof(bool))
        {
            return new GridCheckBoxColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true
            };
        }
        else
        {
            // Default to text column for strings and other types
            var col = new GridTextColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true,
                AllowEditing = mappingName != "Id" // Don't allow editing ID column
            };

            // Apply converter if specified on attribute
            if (displayAttr != null && (displayAttr.ConverterType != null || !string.IsNullOrWhiteSpace(displayAttr.ConverterResourceKey)))
            {
                try
                {
                    var binding = new Binding(mappingName) { Mode = BindingMode.TwoWay };
                    if (!string.IsNullOrWhiteSpace(displayAttr.ConverterResourceKey))
                    {
                        var converterObj = TryFindResource(displayAttr.ConverterResourceKey);
                        if (converterObj is IValueConverter resConv)
                        {
                            binding.Converter = resConv;
                        }
                    }
                    else if (displayAttr.ConverterType != null)
                    {
                        if (Activator.CreateInstance(displayAttr.ConverterType) is IValueConverter conv)
                        {
                            binding.Converter = conv;
                        }
                    }

                    // GridTextColumn supports ValueBinding
                    col.ValueBinding = binding;
                }
                catch (Exception convEx)
                {
                    Log.Warning(convEx, "Failed to apply converter for column {MappingName}", mappingName);
                }
            }
            return col;
        }
    }



    /// <summary>
    /// Converts camelCase or PascalCase to readable text with spaces
    /// </summary>
    private string SplitCamelCase(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;

        var result = System.Text.RegularExpressions.Regex.Replace(input, "([a-z])([A-Z])", "$1 $2");
        return result;
    }

    /// <summary>
    /// Copy selected items from the data grid to clipboard
    /// </summary>
    private void OnCopy(object? sender, RoutedEventArgs? e)
    {
        try
        {
            var grid = GetDataGrid();
            if (grid == null || grid.SelectedItems == null || grid.SelectedItems.Count == 0)
            {
                MessageBox.Show("Please select one or more items to copy.",
                              "No Selection",
                              MessageBoxButton.OK,
                              MessageBoxImage.Information);
                return;
            }

            var selectedItems = grid.SelectedItems;
            var stringBuilder = new System.Text.StringBuilder();

            // Add header row
            if (selectedItems.Count > 0 && selectedItems[0] != null)
            {
                var type = selectedItems[0].GetType();
                var properties = type.GetProperties()
                    .Where(p => p.CanRead)
                    .Select(p => SplitCamelCase(p.Name))
                    .ToArray();

                stringBuilder.AppendLine(string.Join("\t", properties));
            }

            // Add data rows
            foreach (var item in selectedItems)
            {
                if (item == null) continue;

                var type = item.GetType();
                var values = type.GetProperties()
                    .Where(p => p.CanRead)
                    .Select(p =>
                    {
                        try
                        {
                            var value = p.GetValue(item);
                            return value?.ToString() ?? "";
                        }
                        catch
                        {
                            return "";
                        }
                    })
                    .ToArray();

                stringBuilder.AppendLine(string.Join("\t", values));
            }

            Clipboard.SetText(stringBuilder.ToString());
            Log.Information("Copied {Count} items to clipboard", selectedItems.Count);
        }
        catch (Exception ex)
        {
            ErrorReportingService.Instance.ReportError(ex, "Grid_OnCopy", showToUser: true);
        }
    }

    /// <summary>
    /// Paste items from clipboard to the data grid
    /// </summary>
    private void OnPaste(object? sender, RoutedEventArgs? e)
    {
        // Check role-based access: only admins can paste
        var viewModel = DataContext as ViewModels.MainViewModel;
        if (viewModel == null || !viewModel.IsUserAdmin)
        {
            MessageBox.Show("Paste operation is restricted to administrators only.",
                          "Access Denied",
                          MessageBoxButton.OK,
                          MessageBoxImage.Warning);
            return;
        }

        try
        {
            ErrorReportingService.Instance.TrackEvent("GridPasteStarted");
            // show busy cursor for large pastes
            Mouse.OverrideCursor = Cursors.Wait;
            if (!Clipboard.ContainsText())
            {
                MessageBox.Show("Clipboard does not contain text data.",
                              "No Text Data",
                              MessageBoxButton.OK,
                              MessageBoxImage.Information);
                return;
            }

            var clipboardText = Clipboard.GetText();
            var lines = clipboardText.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries);

            if (lines.Length < 2) // Need at least header + 1 data row
            {
                MessageBox.Show("Clipboard data must contain headers and at least one data row.",
                              "Invalid Format",
                              MessageBoxButton.OK,
                              MessageBoxImage.Warning);
                return;
            }

            var vm = DataContext as ViewModels.MainViewModel;
            if (vm == null) return;

            // Parse header to understand column mapping
            var headers = lines[0].Split('\t').Select(h => h.Trim()).ToArray();
            var pastedCount = 0;
            var skippedCount = 0;
            var rowErrors = 0;

            // Create new items from data rows
            for (int i = 1; i < lines.Length; i++)
            {
                var values = lines[i].Split('\t').Select(v => v.Trim()).ToArray();

                // Skip malformed rows
                if (values.Length != headers.Length)
                {
                    Log.Warning("Skipping row {Row}: expected {Expected} columns, got {Actual}", i + 1, headers.Length, values.Length);
                    skippedCount++;
                    continue;
                }

                try
                {
                    // Create header-value mapping for this row
                    var headerValueMap = new Dictionary<string, string>();
                    for (int j = 0; j < headers.Length; j++)
                    {
                        if (!string.IsNullOrWhiteSpace(headers[j]) && !string.IsNullOrWhiteSpace(values[j]))
                        {
                            headerValueMap[headers[j]] = values[j];
                        }
                    }

                    // Skip rows with no valid data
                    if (headerValueMap.Count == 0)
                    {
                        Log.Warning("Skipping row {Row}: no valid data found", i + 1);
                        skippedCount++;
                        continue;
                    }

                    // Create new Enterprise instance using repository mapping
                    var newEnterprise = vm.CreateEnterpriseFromHeaderMapping(headerValueMap);

                    // Best-effort recovery for culture-specific numbers or formatting issues
                    if (newEnterprise.CurrentRate == 0 && TryGetHeaderValue(headerValueMap, out var rateRaw, "currentrate", "rate", "current rate", "monthly rate"))
                    {
                        if (rateRaw != null && TryParseDecimal(rateRaw, out var rateParsed)) newEnterprise.CurrentRate = rateParsed;
                    }
                    if (newEnterprise.MonthlyExpenses == 0 && TryGetHeaderValue(headerValueMap, out var expRaw, "monthlyexpenses", "expenses", "operating expenses", "monthly expenses"))
                    {
                        if (expRaw != null && TryParseDecimal(expRaw, out var expParsed)) newEnterprise.MonthlyExpenses = expParsed;
                    }
                    if (newEnterprise.TotalBudget == 0 && TryGetHeaderValue(headerValueMap, out var budgetRaw, "totalbudget", "budget", "allocated budget"))
                    {
                        if (budgetRaw != null && TryParseDecimal(budgetRaw, out var budgetParsed)) newEnterprise.TotalBudget = budgetParsed;
                    }
                    if (newEnterprise.CitizenCount == 0 && TryGetHeaderValue(headerValueMap, out var countRaw, "citizencount", "citizens", "population", "customer count"))
                    {
                        if (TryParseInt(countRaw, out var countParsed)) newEnterprise.CitizenCount = countParsed;
                    }

                    // Set default values for required properties if not provided
                    if (string.IsNullOrWhiteSpace(newEnterprise.Name))
                        newEnterprise.Name = $"Imported Enterprise {vm.Enterprises.Count + 1}";
                    if (string.IsNullOrWhiteSpace(newEnterprise.Type))
                        newEnterprise.Type = "Utility";

                    // Only set defaults for numeric fields if they weren't explicitly provided
                    // (0 might be a valid value from the data)
                    if (newEnterprise.CurrentRate == 0 && !WasFieldProvided(headerValueMap, "currentrate", "rate", "current rate"))
                        newEnterprise.CurrentRate = 25.00M;
                    if (newEnterprise.MonthlyExpenses == 0 && !WasFieldProvided(headerValueMap, "monthlyexpenses", "expenses", "monthly expenses"))
                        newEnterprise.MonthlyExpenses = 1000.00M;
                    if (newEnterprise.CitizenCount == 0 && !WasFieldProvided(headerValueMap, "citizencount", "citizens", "count", "citizen count"))
                        newEnterprise.CitizenCount = 100;

                    // Generate unique ID (ignore any pasted ID to avoid collisions)
                    var nextId = vm.Enterprises.Count == 0 ? 1 : vm.Enterprises.Max(e => e.Id) + 1;
                    newEnterprise.Id = nextId;

                    // Ensure name uniqueness if duplicates exist
                    if (!string.IsNullOrWhiteSpace(newEnterprise.Name) &&
                        vm.Enterprises.Any(e => string.Equals(e.Name, newEnterprise.Name, StringComparison.OrdinalIgnoreCase)))
                    {
                        newEnterprise.Name = GenerateUniqueName(vm, newEnterprise.Name);
                    }

                    // Add to collection
                    vm.Enterprises.Add(newEnterprise);
                    pastedCount++;
                }
                catch (Exception ex)
                {
                    Log.Warning(ex, "Failed to create enterprise from clipboard row {Row}", i + 1);
                    skippedCount++;
                    rowErrors++;
                    // Centralize row-specific error logging
                    ErrorReportingService.Instance.ReportError(ex, "Grid_OnPaste_Row", showToUser: false);
                }
            }

            // Show results to user (brief toast-like status)
            var message = $"Successfully pasted {pastedCount} enterprise(s).";
            if (skippedCount > 0)
                message += $" {skippedCount} row(s) were skipped due to errors.";

            // Prefer non-blocking brief notification: update StatusBar text if present
            try
            {
                var statusText = this.FindName("StatusTextBlock") as System.Windows.Controls.TextBlock;
                if (statusText != null)
                {
                    statusText.Text = message;
                    var fade = new DoubleAnimation(1.0, 0.6, new Duration(TimeSpan.FromSeconds(3)));
                    statusText.BeginAnimation(System.Windows.UIElement.OpacityProperty, fade);
                }
                else
                {
                    // Fallback to dialog
                    MessageBox.Show(message, "Paste Complete",
                        MessageBoxButton.OK,
                        pastedCount > 0 ? MessageBoxImage.Information : MessageBoxImage.Warning);
                }
            }
            catch
            {
                MessageBox.Show(message, "Paste Complete",
                    MessageBoxButton.OK,
                    pastedCount > 0 ? MessageBoxImage.Information : MessageBoxImage.Warning);
            }

            Log.Information("Pasted {PastedCount} items from clipboard, skipped {SkippedCount}", pastedCount, skippedCount);
            ErrorReportingService.Instance.TrackEvent("GridPasteCompleted", new Dictionary<string, object>
            {
                ["RowsPasted"] = pastedCount,
                ["RowsSkipped"] = skippedCount,
                ["RowErrors"] = rowErrors,
                ["HeaderCount"] = headers.Length
            });
            ErrorReportingService.Instance.IncrementCounter("GridPaste.TotalRows", pastedCount + skippedCount);
            if (rowErrors > 0) ErrorReportingService.Instance.IncrementCounter("GridPaste.RowErrors", rowErrors);
        }
        catch (Exception ex)
        {
            ErrorReportingService.Instance.ReportError(ex, "Grid_OnPaste", showToUser: true);
            ErrorReportingService.Instance.TrackEvent("GridPasteFailed", new Dictionary<string, object>
            {
                ["Message"] = ex.Message
            });
        }
        finally
        {
            Mouse.OverrideCursor = null;
        }
    }

    private bool TryGetHeaderValue(IDictionary<string, string> headerValueMap, out string? value, params string[] fieldNames)
    {
        value = null;
        foreach (var kvp in headerValueMap)
        {
            var normalizedHeader = kvp.Key.Replace(" ", string.Empty).Replace("-", string.Empty).Replace("_", string.Empty).ToLowerInvariant();
            if (fieldNames.Any(field => normalizedHeader.Contains(field.Replace(" ", string.Empty).ToLowerInvariant())))
            {
                value = kvp.Value;
                return true;
            }
        }
        return false;
    }

    private bool TryParseInt(string? value, out int result)
    {
        var clean = value?.Replace(",", string.Empty)?.Trim();
        return int.TryParse(clean, System.Globalization.NumberStyles.Integer, System.Globalization.CultureInfo.CurrentCulture, out result);
    }

    private string GenerateUniqueName(ViewModels.MainViewModel vm, string baseName)
    {
        var suffix = 1;
        var candidate = baseName;
        while (vm.Enterprises.Any(e => string.Equals(e.Name, candidate, StringComparison.OrdinalIgnoreCase)))
        {
            suffix++;
            candidate = $"{baseName} ({suffix})";
        }
        return candidate;
    }

    /// <summary>
    /// Helper method to parse decimal values, handling currency symbols and formatting
    /// </summary>
    private bool TryParseDecimal(string value, out decimal result)
    {
        // Remove common currency symbols and formatting
        var cleanValue = value.Replace("$", "").Replace(",", "").Replace(" ", "").Trim();

        // Try parsing with various number styles
        return decimal.TryParse(cleanValue,
            System.Globalization.NumberStyles.Number |
            System.Globalization.NumberStyles.Currency |
            System.Globalization.NumberStyles.AllowDecimalPoint,
            System.Globalization.CultureInfo.CurrentCulture,
            out result);
    }

    /// <summary>
    /// Helper method to check if a field was provided in the header-value mapping
    /// </summary>
    private bool WasFieldProvided(IDictionary<string, string> headerValueMap, params string[] fieldNames)
    {
        foreach (var kvp in headerValueMap)
        {
            var normalizedHeader = kvp.Key.Replace(" ", "").Replace("-", "").Replace("_", "").ToLowerInvariant();
            if (fieldNames.Any(field => normalizedHeader.Contains(field.ToLowerInvariant())))
            {
                return true;
            }
        }
        return false;
    }

    /// <summary>
    /// Helper method to check if a field was provided in the data (not empty)
    /// </summary>
    private bool WasFieldProvided(string[] headers, string[] values, params string[] fieldNames)
    {
        for (int i = 0; i < headers.Length; i++)
        {
            var normalizedHeader = headers[i].Replace(" ", "").Replace("-", "").Replace("_", "").ToLowerInvariant();
            if (fieldNames.Any(field => normalizedHeader.Contains(field.ToLowerInvariant())))
            {
                if (!string.IsNullOrWhiteSpace(values[i]))
                    return true;
            }
        }
        return false;
    }

    /// <summary>
    /// Attempt to apply a Syncfusion theme; falls back to Fluent Light if requested theme fails (e.g., renamed or removed).
    /// </summary>
    private void TryApplyTheme(string themeName)
    {
        ThemeUtility.TryApplyTheme(this, themeName);
    }



    /// <summary>Switch to Fluent Dark theme and persist choice.</summary>
    private void OnFluentDark(object sender, RoutedEventArgs e)
    {
    TryApplyTheme("FluentDark");
    SettingsService.Instance.Current.Theme = "FluentDark";
        SettingsService.Instance.Save();
    Log.Information("Theme changed to {Theme}", "Fluent Dark");
    UpdateThemeToggleVisuals();
        // transient status
        var statusText = this.FindName("StatusTextBlock") as System.Windows.Controls.TextBlock;
        if (statusText != null) statusText.Text = "Theme: Fluent Dark";
    }
    /// <summary>Switch to Fluent Light theme and persist choice.</summary>
    private void OnFluentLight(object sender, RoutedEventArgs e)
    {
    TryApplyTheme("FluentLight");
    SettingsService.Instance.Current.Theme = "FluentLight";
        SettingsService.Instance.Save();
    Log.Information("Theme changed to {Theme}", "Fluent Light");
        UpdateThemeToggleVisuals();
        // transient status
        var statusText = this.FindName("StatusTextBlock") as System.Windows.Controls.TextBlock;
        if (statusText != null) statusText.Text = "Theme: Fluent Light";
    }

    private void UpdateThemeToggleVisuals()
    {
        var current = Services.ThemeUtility.NormalizeTheme(SettingsService.Instance.Current.Theme);
        RibbonButton? btnDark = FindName("BtnFluentDark") as RibbonButton;
        if (btnDark != null)
        {
            btnDark.IsEnabled = current != "FluentDark";
            btnDark.Label = current == "FluentDark" ? "✔ Fluent Dark" : "Fluent Dark";
        }
        RibbonButton? btnLight = FindName("BtnFluentLight") as RibbonButton;
        if (btnLight != null)
        {
            btnLight.IsEnabled = current != "FluentLight";
            btnLight.Label = current == "FluentLight" ? "✔ Fluent Light" : "Fluent Light";
        }
    }
    /// <summary>Display modal About dialog with version information.</summary>
    private void OnAbout(object? sender, RoutedEventArgs? e)
    {
        var about = new AboutWindow { Owner = this };
        about.ShowDialog();
    }

    /// <summary>
    /// Restores last known window bounds (only if previously saved). Maximized state is applied after window is loaded
    /// to avoid layout measurement issues during construction.
    /// </summary>
    private void RestoreWindowState()
    {
        var s = SettingsService.Instance.Current;
        if (s.WindowWidth.HasValue) Width = s.WindowWidth.Value;
        if (s.WindowHeight.HasValue) Height = s.WindowHeight.Value;
        if (s.WindowLeft.HasValue) Left = s.WindowLeft.Value;
        if (s.WindowTop.HasValue) Top = s.WindowTop.Value;
    }

    /// <summary>
    /// Applies persisted maximized state post-load. Separated for clarity and potential future animation hooks.
    /// </summary>
    private void ApplyMaximized()
    {
        Log.Information("🔄 Applying maximized window state from settings");
        var s = SettingsService.Instance.Current;
        if (s.WindowMaximized == true)
        {
            WindowState = WindowState.Maximized;
            Log.Information("✅ Window maximized state applied");
        }
        else
        {
            Log.Information("ℹ️ Window remains in normal state");
        }
    }

    /// <summary>
    /// Persists window bounds only when in Normal state to avoid capturing the restored size of a maximized window.
    /// </summary>
    private void PersistWindowState()
    {
        Log.Information("💾 Persisting window state to settings");
        var s = SettingsService.Instance.Current;
        s.WindowMaximized = WindowState == WindowState.Maximized;
        if (WindowState == WindowState.Normal)
        {
            s.WindowWidth = Width;
            s.WindowHeight = Height;
            s.WindowLeft = Left;
            s.WindowTop = Top;
            Log.Information("✅ Window bounds persisted - Size: {Width}x{Height}, Position: ({Left}, {Top})",
                Width, Height, Left, Top);
        }
        else
        {
            Log.Information("ℹ️ Window in maximized state - bounds not persisted");
        }
        SettingsService.Instance.Save();
        Log.Information("💾 Window state persistence completed");
    }

    /// <summary>
    /// Opens the Enterprise Management panel
    /// </summary>
    private void OnEnterpriseManagement(object? sender, RoutedEventArgs? e)
    {
        try
        {
            if (DataContext is ViewModels.MainViewModel vm && vm.OpenEnterpriseCommand.CanExecute(null))
            {
                vm.OpenEnterpriseCommand.Execute(null);
                return;
            }

            ActivateDockingPanel("EnterprisePanel");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open Enterprise Management: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Opens the Budget Analysis panel
    /// </summary>
    private void OnBudgetAnalysis(object? sender, RoutedEventArgs? e)
    {
        try
        {
            if (DataContext is ViewModels.MainViewModel vm && vm.OpenBudgetCommand.CanExecute(null))
            {
                vm.OpenBudgetCommand.Execute(null);
                return;
            }

            ActivateDockingPanel("BudgetPanel");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open Budget Analysis: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Opens the Customer Management window
    /// </summary>
    private void OnCustomerManagement(object sender, RoutedEventArgs e)
    {
        try
        {
            if (DataContext is ViewModels.MainViewModel vm && vm.OpenCustomerManagementCommand.CanExecute(null))
            {
                vm.OpenCustomerManagementCommand.Execute(null);
                return;
            }

            UtilityCustomerView.ShowCustomerWindow();
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open Customer Management: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    private void OnToggleDynamicColumns(object sender, RoutedEventArgs e)
    {
        try
        {
            var grid = GetDataGrid();
            if (grid == null) return;
            
            // Toggle the ViewModel property which will trigger the property changed event
            if (DataContext is ViewModels.MainViewModel vm)
            {
                vm.UseDynamicColumns = !vm.UseDynamicColumns;
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to toggle column mode");
            MessageBox.Show($"Failed to toggle column mode: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Opens the AI Assistant panel
    /// </summary>
    private void OnAIAssist(object? sender, RoutedEventArgs? e)
    {
        try
        {
            if (DataContext is ViewModels.MainViewModel vm && vm.OpenAIAssistCommand.CanExecute(null))
            {
                vm.OpenAIAssistCommand.Execute(null);
                return;
            }

            ActivateDockingPanel("AIAssistPanel");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open AI Assistant: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Opens the Settings panel
    /// </summary>
    private void OnSettings(object? sender, RoutedEventArgs? e)
    {
        try
        {
            if (DataContext is ViewModels.MainViewModel vm && vm.OpenSettingsCommand.CanExecute(null))
            {
                vm.OpenSettingsCommand.Execute(null);
                return;
            }

            ActivateDockingPanel("SettingsPanel");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open Settings: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Opens the Dashboard panel
    /// </summary>
    private void OnDashboard(object? sender, RoutedEventArgs? e)
    {
        try
        {
            if (DataContext is ViewModels.MainViewModel vm && vm.OpenDashboardCommand.CanExecute(null))
            {
                vm.OpenDashboardCommand.Execute(null);
                return;
            }

            ActivateDockingPanel("DashboardPanel");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open Dashboard: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Handles keyboard shortcuts by delegating to existing event handlers
    /// </summary>
    private void HandleKeyboardShortcut(string action)
    {
        Log.Information("🎯 Executing keyboard shortcut action: {Action}", action);
        try
        {
            switch (action)
            {
                case "Settings":
                    Log.Debug("🎯 Opening Settings panel");
                    OnSettings(null, null);
                    break;
                case "Dashboard":
                    Log.Debug("🎯 Opening Dashboard panel");
                    OnDashboard(null, null);
                    break;
                case "AIAssist":
                    Log.Debug("🎯 Opening AI Assist panel");
                    OnAIAssist(null, null);
                    break;
                case "Enterprise":
                    Log.Debug("🎯 Opening Enterprise Management panel");
                    OnEnterpriseManagement(null, null);
                    break;
                case "Budget":
                    Log.Debug("🎯 Opening Budget Analysis panel");
                    OnBudgetAnalysis(null, null);
                    break;
                case "About":
                    Log.Debug("🎯 Opening About dialog");
                    OnAbout(null, null);
                    break;
                default:
                    Log.Warning("🎯 Unknown keyboard shortcut action: {Action}", action);
                    break;
            }
            Log.Information("✅ Keyboard shortcut action completed: {Action}", action);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "❌ Failed to handle keyboard shortcut for {Action}", action);
        }
    }

    /// <summary>
    /// Handles window-level keyboard shortcuts
    /// </summary>
    private void OnKeyDown(object sender, KeyEventArgs e)
    {
        ArgumentNullException.ThrowIfNull(e);
        Log.Debug("⌨️ KeyDown event - Key: {Key}, Modifiers: {Modifiers}, Handled: {Handled}", e.Key, Keyboard.Modifiers, e.Handled);

        // Only handle if Ctrl is pressed
        if ((Keyboard.Modifiers & ModifierKeys.Control) != ModifierKeys.Control)
        {
            Log.Debug("⌨️ KeyDown ignored - Ctrl not pressed");
            return;
        }

        // Scope copy/paste to when focus is within the main SfDataGrid to avoid conflicts
        bool focusInMainGrid = false;
        try
        {
            var focused = Keyboard.FocusedElement as DependencyObject;
            var grid = GetDataGrid();
            if (focused != null && grid != null)
            {
                focusInMainGrid = IsAncestorOf(grid, focused);
            }
            Log.Debug("⌨️ Focus check - InMainGrid: {InMainGrid}, FocusedElement: {FocusedElement}", focusInMainGrid, focused?.GetType().Name ?? "null");
        }
        catch (Exception ex)
        {
            Log.Warning(ex, "⌨️ Error checking focus for keyboard shortcuts");
        }

        string? action = null;
        switch (e.Key)
        {
            case Key.V:
                if (focusInMainGrid)
                {
                    Log.Information("⌨️ Ctrl+V pressed in grid - executing paste");
                    OnPaste(null, null);
                    e.Handled = true;
                    return;
                }
                break;
            case Key.C:
                if (focusInMainGrid)
                {
                    Log.Information("⌨️ Ctrl+C pressed in grid - executing copy");
                    OnCopy(null, null);
                    e.Handled = true;
                    return;
                }
                break;
            case Key.S:
                if ((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift)
                    action = "Settings";
                break;
            case Key.D:
                if ((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift)
                    action = "Dashboard";
                else
                    action = "AIAssist";
                break;
            case Key.E:
                action = "Enterprise";
                break;
            case Key.B:
                action = "Budget";
                break;
            case Key.A:
                if ((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift)
                    action = "About";
                break;
        }

        if (action != null)
        {
            Log.Information("⌨️ Keyboard shortcut activated - Action: {Action}, Key: Ctrl+{Key}", action, e.Key);
            HandleKeyboardShortcut(action);
            e.Handled = true;
        }
        else
        {
            Log.Debug("⌨️ Keyboard shortcut not recognized - Key: Ctrl+{Key}", e.Key);
        }
    }

    /// <summary>
    /// Returns true if ancestor is an ancestor of element in either visual or logical tree
    /// </summary>
    private static bool IsAncestorOf(DependencyObject ancestor, DependencyObject element)
    {
        if (ancestor == null || element == null) return false;

        // Visual tree walk
        var current = element;
        for (int i = 0; i < 200 && current != null; i++)
        {
            if (ReferenceEquals(current, ancestor)) return true;
            current = System.Windows.Media.VisualTreeHelper.GetParent(current);
        }

        // Logical tree fallback
        current = element;
        for (int i = 0; i < 200 && current != null; i++)
        {
            if (ReferenceEquals(current, ancestor)) return true;
            current = System.Windows.LogicalTreeHelper.GetParent(current);
        }

        return false;
    }

    /// <summary>
    /// Handles Azure AD sign in
    /// </summary>
    private async void OnSignIn(object sender, RoutedEventArgs e)
    {
        try
        {
            if (_authService == null)
            {
                MessageBox.Show("Authentication service is not available.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            var signInButton = FindName("BtnSignIn") as RibbonButton;
            if (signInButton != null) signInButton.IsEnabled = false;
            var result = await _authService.SignInAsync();

            MessageBox.Show($"Successfully signed in as {result.Account.Username}",
                          "Sign In Successful",
                          MessageBoxButton.OK,
                          MessageBoxImage.Information);

            await UpdateAuthenticationUIAsyncInternal();
        }
        catch (AuthenticationException ex)
        {
            MessageBox.Show($"Sign in failed: {ex.Message}",
                          "Sign In Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Unexpected error during sign in: {ex.Message}",
                          "Sign In Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
        finally
        {
            var signInButton = FindName("BtnSignIn") as RibbonButton;
            if (signInButton != null) signInButton.IsEnabled = true;
        }
    }

    /// <summary>
    /// Handles Azure AD sign out
    /// </summary>
    private async void OnSignOut(object sender, RoutedEventArgs e)
    {
        try
        {
            if (_authService == null)
            {
                MessageBox.Show("Authentication service is not available.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            var signOutButton = FindName("BtnSignOut") as RibbonButton;
            if (signOutButton != null) signOutButton.IsEnabled = false;
            await _authService.SignOutAsync();

            MessageBox.Show("Successfully signed out",
                          "Sign Out Successful",
                          MessageBoxButton.OK,
                          MessageBoxImage.Information);

            UpdateAuthenticationUI();
        }
        catch (AuthenticationException ex)
        {
            MessageBox.Show($"Sign out failed: {ex.Message}",
                          "Sign Out Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Unexpected error during sign out: {ex.Message}",
                          "Sign Out Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
        finally
        {
            var signOutButton = FindName("BtnSignOut") as RibbonButton;
            if (signOutButton != null) signOutButton.IsEnabled = true;
        }
    }

    /// <summary>
    /// Updates the authentication UI based on current authentication state
    /// </summary>
    private void UpdateAuthenticationUI()
    {
        // Ensure we're on the UI thread
        if (!Dispatcher.CheckAccess())
        {
            _ = Dispatcher.InvokeAsync(async () => await UpdateAuthenticationUIAsyncInternal());
            return;
        }

        // On UI thread: run async version but don't block
        _ = UpdateAuthenticationUIAsyncInternal();
    }

    private string TryExtractEmailFromUserInfo(UserInfo? userInfo)
    {
        ArgumentNullException.ThrowIfNull(userInfo);

        // Prefer explicit Email if available
        var email = userInfo.Email;
        if (!string.IsNullOrWhiteSpace(email) && email.Contains("@"))
            return email;

        // Fall back to username if it looks like an email
        var candidate = userInfo.Username;
        if (!string.IsNullOrWhiteSpace(candidate) && candidate.Contains("@"))
            return candidate;

        // As a last resort, attempt to detect an email-like token in Name
        if (!string.IsNullOrWhiteSpace(userInfo.Name) && userInfo.Name.Contains("@"))
            return userInfo.Name;

        return string.Empty;
    }

    /// <summary>
    /// Activates a dockable panel in the DockingManager
    /// </summary>
    private void ActivateDockingPanel(string panelName)
    {
        try
        {
            var contentControl = FindName(panelName) as ContentControl;
            if (contentControl == null)
            {
                Log.Error("Panel {PanelName} not found", panelName);
                return;
            }

            // Ensure panel is in docked state
            DockingManager.SetState(contentControl, DockState.Dock);

            // Set as active window
            MainDockingManager.ActiveWindow = contentControl;

            // Force focus and bring into view
            contentControl.BringIntoView();
            contentControl.Focus();

            Log.Information("Successfully activated panel {PanelName}", panelName);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to activate panel {PanelName}", panelName);
        }
    }

    /// <summary>
    /// Gets the display header for a docking panel name
    /// </summary>
    private string GetHeaderForPanel(string panelName)
    {
        return panelName switch
        {
            "WidgetsPanel" => "Municipal Enterprises",
            "EnterprisePanel" => "Enterprise",
            "BudgetPanel" => "Budget",
            "AIAssistPanel" => "AI Assistant",
            "SettingsPanel" => "Settings",
            "DashboardPanel" => "Dashboard",
            _ => panelName
        };
    }

    /// <summary>
    /// Validates if a docking panel is available in the visual tree
    /// </summary>
    private bool IsPanelAvailable(string panelName)
    {
        return FindName(panelName) is ContentControl;
    }

    /// <summary>
    /// Resets the docking layout to default state using Syncfusion's ResetState API
    /// </summary>
    private void ResetDockingLayout()
    {
        try
        {
            if (MainDockingManager != null)
            {
                // Use Syncfusion's built-in ResetState method which properly clears persisted state
                // and restores the layout to the initial XAML-defined configuration
                MainDockingManager.ResetState();
                
                Log.Information("Docking layout reset to defaults using ResetState()");
            }
            else
            {
                Log.Warning("MainDockingManager is null, cannot reset layout");
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to reset docking layout");
        }
    }

    /// <summary>
    /// Saves the current docking layout to XML file
    /// </summary>
    private void SaveDockingLayout()
    {
        try
        {
            if (MainDockingManager != null)
            {
                // Save to application data directory
                var appDataPath = System.IO.Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                    "WileyWidget"
                );
                
                if (!System.IO.Directory.Exists(appDataPath))
                {
                    System.IO.Directory.CreateDirectory(appDataPath);
                }
                
                var layoutFilePath = System.IO.Path.Combine(appDataPath, "docking_layout.xml");
                
                // Use Syncfusion's SaveDockState for .NET 6+
                MainDockingManager.SaveDockState(layoutFilePath);
                
                Log.Information("Docking layout saved to {FilePath}", layoutFilePath);
            }
            else
            {
                Log.Warning("MainDockingManager is null, cannot save layout");
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to save docking layout");
        }
    }

    /// <summary>
    /// Loads a previously saved docking layout from XML file
    /// </summary>
    private void LoadDockingLayout()
    {
        try
        {
            if (MainDockingManager != null)
            {
                var appDataPath = System.IO.Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                    "WileyWidget"
                );
                
                var layoutFilePath = System.IO.Path.Combine(appDataPath, "docking_layout.xml");
                
                if (System.IO.File.Exists(layoutFilePath))
                {
                    // Use Syncfusion's LoadDockState for .NET 6+
                    MainDockingManager.LoadDockState(layoutFilePath);
                    
                    Log.Information("Docking layout loaded from {FilePath}", layoutFilePath);
                }
                else
                {
                    Log.Information("No saved layout found at {FilePath}", layoutFilePath);
                }
            }
            else
            {
                Log.Warning("MainDockingManager is null, cannot load layout");
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to load docking layout");
        }
    }

    private void OnViewModelNavigationRequested(object? sender, NavigationRequestEventArgs e)
    {
        Log.Information("=== VIEW MODEL NAVIGATION REQUEST RECEIVED ===");
        Log.Information("Navigation request received from {Sender} for panel '{Panel}' display '{View}'",
            sender?.GetType().Name ?? "Unknown", e?.PanelName ?? "null", e?.ViewName ?? "null");

        if (e == null || string.IsNullOrWhiteSpace(e.PanelName))
        {
            Log.Warning("=== NAVIGATION REQUEST REJECTED ===");
            Log.Warning("Navigation request rejected: event args null or panel name empty");
            return;
        }

        // Validate panel availability
        if (!IsPanelAvailable(e.PanelName))
        {
            // Handle special layout commands
            if (e.PanelName == "ResetLayout")
            {
                ResetDockingLayout();
                Log.Information("Layout reset completed");
                return;
            }
            else if (e.PanelName == "SaveLayout")
            {
                SaveDockingLayout();
                Log.Information("Layout saved");
                return;
            }
            else if (e.PanelName == "LoadLayout")
            {
                LoadDockingLayout();
                Log.Information("Layout loaded");
                return;
            }

            Log.Error("=== NAVIGATION REQUEST REJECTED ===");
            Log.Error("Navigation request rejected: panel '{Panel}' not found in visual tree", e.PanelName);
            return;
        }

        Log.Information("Processing navigation request for panel '{Panel}'", e.PanelName);

        if (!Dispatcher.CheckAccess())
        {
            Log.Information("Not on UI thread, dispatching navigation to UI thread for panel '{Panel}'", e.PanelName);
            _ = Dispatcher.InvokeAsync(() => ActivateDockingPanel(e.PanelName));
            Log.Information("Navigation request dispatched to UI thread");
        }
        else
        {
            Log.Information("On UI thread, activating docking panel '{Panel}' directly", e.PanelName);
            ActivateDockingPanel(e.PanelName);
        }

        Log.Information("=== VIEW MODEL NAVIGATION REQUEST PROCESSED ===");
    }

    private void OnDockingActiveWindowChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
    {
        try
        {
            if (DataContext is not ViewModels.MainViewModel vm)
                return;

            if (e.NewValue is not DependencyObject newWindow)
                return;

            var header = DockingManager.GetHeader(newWindow) as string;
            if (!string.IsNullOrWhiteSpace(header))
            {
                vm.CurrentViewName = header;
            }
        }
        catch (Exception ex)
        {
            Log.Warning(ex, "Failed to process docking active window change");
        }
    }

    /// <summary>
    /// Handles authentication state changes
    /// </summary>
    private void OnAuthenticationStateChanged(object? sender, AuthenticationEventArgs e)
    {
        ArgumentNullException.ThrowIfNull(e);
        // Update UI on UI thread asynchronously to avoid blocking
        _ = Dispatcher.InvokeAsync(async () => await UpdateAuthenticationUIAsyncInternal());
    }

    // Async version used internally to support awaited flows from sign in/out
    private async System.Threading.Tasks.Task UpdateAuthenticationUIAsyncInternal()
    {
        Log.Information("🔐 Starting authentication UI update");
        await System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority.Background);
        try
        {
            if (_authService == null)
            {
                Log.Debug("Authentication service is not available - skipping authentication UI update");
                if (DataContext is ViewModels.MainViewModel vmFallback)
                {
                    vmFallback.CurrentUserName = "Not signed in";
                    vmFallback.CurrentUserEmail = string.Empty;
                    vmFallback.IsUserAdmin = false;
                    vmFallback.UserRoles = new List<string>();
                }
                Log.Information("🔐 Authentication UI updated with fallback values (not signed in)");
                return;
            }

            if (_authService.IsAuthenticated)
            {
                Log.Information("🔐 User is authenticated - updating UI for signed-in state");
                var signInButton = FindName("BtnSignIn") as RibbonButton;
                if (signInButton != null) signInButton.IsEnabled = false;
                var signOutButton = FindName("BtnSignOut") as RibbonButton;
                if (signOutButton != null) signOutButton.IsEnabled = true;

                if (DataContext is ViewModels.MainViewModel viewModel)
                {
                    var userInfo = _authService.GetUserInfo();
                    if (userInfo != null)
                    {
                        viewModel.CurrentUserName = string.IsNullOrWhiteSpace(userInfo.Name) ? userInfo.Username ?? Environment.UserName : userInfo.Name;
                        viewModel.CurrentUserEmail = TryExtractEmailFromUserInfo(userInfo);
                        viewModel.IsUserAdmin = userInfo.IsAdmin;
                        viewModel.UserRoles = userInfo.Roles ?? new List<string>();
                        Log.Information("🔐 Authentication UI updated - User: {UserName}, Admin: {IsAdmin}, Roles: {RoleCount}",
                            viewModel.CurrentUserName, viewModel.IsUserAdmin, viewModel.UserRoles.Count);
                    }
                    else
                    {
                        Log.Warning("AuthenticationService reported IsAuthenticated=true but GetUserInfo() returned null");
                        viewModel.CurrentUserName = Environment.UserName ?? "Signed in";
                        viewModel.CurrentUserEmail = string.Empty;
                        viewModel.IsUserAdmin = false;
                        viewModel.UserRoles = new List<string>();
                        Log.Information("🔐 Authentication UI updated with fallback values (authenticated but no user info)");
                    }
                }
            }
            else
            {
                Log.Information("🔐 User is not authenticated - updating UI for signed-out state");
                var signInButton = FindName("BtnSignIn") as RibbonButton;
                if (signInButton != null) signInButton.IsEnabled = true;
                var signOutButton = FindName("BtnSignOut") as RibbonButton;
                if (signOutButton != null) signOutButton.IsEnabled = false;

                if (DataContext is ViewModels.MainViewModel viewModel)
                {
                    viewModel.CurrentUserName = "Not signed in";
                    viewModel.CurrentUserEmail = string.Empty;
                    viewModel.IsUserAdmin = false;
                    viewModel.UserRoles = new List<string>();
                }
                Log.Information("🔐 Authentication UI updated for signed-out state");
            }
        }
        catch (Exception ex)
        {
            ErrorReportingService.Instance.ReportError(ex, "UpdateAuthenticationUIAsync", showToUser: false);
            Log.Error(ex, "Unhandled exception while updating authentication UI (async)");
        }
    }

    private IEnumerable<string> GetAllNamedElements()
    {
        var names = new List<string>();
        try
        {
            // Walk the logical tree to find all named elements
            foreach (var element in LogicalTreeHelper.GetChildren(this).OfType<FrameworkElement>())
            {
                if (!string.IsNullOrEmpty(element.Name))
                {
                    names.Add($"{element.Name} ({element.GetType().Name})");
                }
                // Recursively check children
                names.AddRange(GetNamedElementsRecursive(element));
            }
        }
        catch (Exception ex)
        {
            names.Add($"Error enumerating elements: {ex.Message}");
        }
        return names;
    }

    private IEnumerable<string> GetNamedElementsRecursive(FrameworkElement element)
    {
        var names = new List<string>();
        try
        {
            foreach (var child in LogicalTreeHelper.GetChildren(element).OfType<FrameworkElement>())
            {
                if (!string.IsNullOrEmpty(child.Name))
                {
                    names.Add($"{child.Name} ({child.GetType().Name})");
                }
                names.AddRange(GetNamedElementsRecursive(child));
            }
        }
        catch (Exception ex)
        {
            names.Add($"Error in {element.Name}: {ex.Message}");
        }
        return names;
    }

    /// <summary>
    /// Shows a user-friendly error dialog for service failures
    /// </summary>
    private void ShowServiceErrorDialog(string serviceName, string errorMessage, string suggestion = "")
    {
        try
        {
            var message = $"⚠️ {serviceName} Service Issue\n\n{errorMessage}";
            if (!string.IsNullOrEmpty(suggestion))
            {
                message += $"\n\n💡 {suggestion}";
            }

            var result = MessageBox.Show(
                message,
                $"{serviceName} Service Warning",
                MessageBoxButton.OK,
                MessageBoxImage.Warning);

            Log.Warning("User notified of {Service} service issue: {Message}", serviceName, errorMessage);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to show service error dialog for {Service}", serviceName);
        }
    }

    /// <summary>
    /// <summary>
    /// Handles keyboard input for AI message text box - sends message on Enter key
    /// </summary>
    private void OnAIMessageKeyDown(object sender, KeyEventArgs e)
    {
        if (e.Key == Key.Enter && !Keyboard.IsKeyDown(Key.LeftShift) && !Keyboard.IsKeyDown(Key.RightShift))
        {
            // Send message on Enter (but not Shift+Enter for multiline)
            if (DataContext is ViewModels.MainViewModel vm && vm.CanSendAIMessage())
            {
                vm.SendAIMessageCommand.Execute(null);
                e.Handled = true;
            }
        }
    }

    /// <summary>
    /// Shows a critical error dialog that may prevent app functionality
    /// </summary>
    private void ShowCriticalErrorDialog(string title, string message, string details = "")
    {
        try
        {
            var fullMessage = message;
            if (!string.IsNullOrEmpty(details))
            {
                fullMessage += $"\n\nTechnical Details:\n{details}";
            }

            var result = MessageBox.Show(
                fullMessage,
                title,
                MessageBoxButton.OK,
                MessageBoxImage.Error);

            Log.Error("Critical error dialog shown: {Title} - {Message}", title, message);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to show critical error dialog: {Title}", title);
        }
    }

    private void OnWindowClosing(object sender, System.ComponentModel.CancelEventArgs e)
    {
        // Prevent the window from closing for the first 30 seconds to allow debugging
        if ((DateTime.Now - _startTime).TotalSeconds < 30)
        {
            Console.WriteLine("[MAINWINDOW] Preventing close for debugging");
            e.Cancel = true;
            return;
        }
        
        PersistWindowState();
    }
}
