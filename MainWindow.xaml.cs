using System.Windows;
using System.Windows.Input;
using Syncfusion.SfSkinManager; // Theme manager
using Syncfusion.Windows.Shared; // Theme names (if needed)
using Syncfusion.UI.Xaml.Grid; // Grid controls
using Syncfusion.Windows.Tools.Controls; // Ribbon controls
using WileyWidget.Services;
using Serilog;
using System.Linq;
using Microsoft.Extensions.DependencyInjection;
using WileyWidget.ViewModels;
using System;
using System.Reflection;
using WileyWidget.Attributes;
using System.Diagnostics;

namespace WileyWidget;

/// <summary>
/// Primary shell window: applies persisted theme + window geometry, wires basic commands (theme switch, about),
/// and persists size/state on close. Keeps logic minimal—heavy operations belong in view models/services.
/// </summary>
public partial class MainWindow : Window
{
    // Grid control field (automatically generated by WPF from XAML x:Name)
    // private Syncfusion.UI.Xaml.Grid.SfDataGrid Grid;

    // Ribbon button fields (automatically generated by WPF from XAML x:Name)
    // private dynamic BtnFluentDark;
    // private dynamic BtnFluentLight;
    // private dynamic BtnDynamicColumns;

    private readonly AuthenticationService _authService;
    private readonly IServiceProvider _serviceProvider;
    private IServiceScope _viewScope; // keep scoped services alive for the window lifetime

    private Syncfusion.UI.Xaml.Grid.SfDataGrid GetDataGrid()
    {
        return FindName("Grid") as Syncfusion.UI.Xaml.Grid.SfDataGrid;
    }

    // Keep a parameterless constructor for XAML/designer and legacy call sites
    public MainWindow()
    {
        var constructorTimer = Stopwatch.StartNew();
        App.LogDebugEvent("VIEW_INIT", "MainWindow constructor started");

        InitializeComponent();

        // Try to resolve services from the global provider when available. If not available
        // we'll continue and let UpdateAuthenticationUI be defensive.
        try
        {
            var provider = App.ServiceProvider;
            if (provider == null && Application.Current?.Properties?.Contains("ServiceProvider") == true)
            {
                provider = Application.Current.Properties["ServiceProvider"] as System.IServiceProvider;
            }

            _serviceProvider = provider;

            if (_serviceProvider != null)
            {
                try
                {
                    _authService = _serviceProvider.GetService<AuthenticationService>();
                    if (_authService != null)
                    {
                        _authService.AuthenticationStateChanged += OnAuthenticationStateChanged;
                    }
                }
                catch (Exception innerEx)
                {
                    Log.Warning(innerEx, "Failed to resolve AuthenticationService from DI container during MainWindow construction");
                }
            }

            App.LogDebugEvent("VIEW_INIT", $"MainWindow services initialized in {constructorTimer.ElapsedMilliseconds}ms");
        }
        catch (Exception ex)
        {
            // Keep the constructor from crashing - log and continue; UpdateAuthenticationUI will be defensive
            Log.Error(ex, "Unexpected error during MainWindow construction service resolution");
        }

        // Apply persisted theme or default
        TryApplyTheme(SettingsService.Instance.Current.Theme);
        // Dynamic columns will be built when DataContext is set in OnWindowLoaded
        RestoreWindowState();
        Loaded += OnWindowLoaded;
        Closing += (_, _) => PersistWindowState();
        KeyDown += OnKeyDown;
        UpdateThemeToggleVisuals();

        constructorTimer.Stop();
        App.LogDebugEvent("VIEW_INIT", $"MainWindow constructor completed in {constructorTimer.ElapsedMilliseconds}ms");
        App.LogStartupTiming("MainWindow Constructor", constructorTimer.Elapsed);
    }

    private void OnWindowLoaded(object sender, RoutedEventArgs e)
    {
        var loadTimer = Stopwatch.StartNew();
        App.LogDebugEvent("VIEW_INIT", "MainWindow.OnWindowLoaded started");

        // Initialize DataContext with scoped services when window is loaded
        try
        {
            App.LogDebugEvent("VIEW_INIT", "Creating service scope and ViewModel");
            _viewScope = _serviceProvider.CreateScope();
            var mainViewModel = _viewScope.ServiceProvider.GetRequiredService<ViewModels.MainViewModel>();
            DataContext = mainViewModel;

            App.LogDebugEvent("VIEW_INIT", "DataContext set, configuring ViewModel properties");

            // Subscribe to property changes to handle dynamic column toggling
            mainViewModel.PropertyChanged += OnViewModelPropertyChanged;
            
            // Load and apply the persisted column mode preference
            mainViewModel.UseDynamicColumns = SettingsService.Instance.Current.UseDynamicColumns;

            // Now that DataContext and visual tree are ready, apply maximized state and auth UI
            App.LogDebugEvent("VIEW_INIT", "Applying window state and authentication UI");
            ApplyMaximized();
            UpdateAuthenticationUI();
            
            // Initialize grid columns based on current setting
            var grid = GetDataGrid();
            if (grid != null)
            {
                App.LogDebugEvent("VIEW_INIT", "Initializing grid columns");
                if (mainViewModel.UseDynamicColumns)
                {
                    BuildDynamicColumns();
                    App.LogDebugEvent("VIEW_INIT", "Dynamic columns built");
                }
                else
                {
                    grid.AutoGenerateColumns = false;
                    grid.Columns.Clear();
                    AddStaticColumns(grid);
                    App.LogDebugEvent("VIEW_INIT", "Static columns added");
                }
            }

            loadTimer.Stop();
            App.LogDebugEvent("VIEW_INIT", $"MainWindow.OnWindowLoaded completed in {loadTimer.ElapsedMilliseconds}ms");
            App.LogStartupTiming("MainWindow OnWindowLoaded", loadTimer.Elapsed);
            Log.Information("MainWindow loaded and initialized successfully");
        }
        catch (Exception ex)
        {
            App.LogDebugEvent("VIEW_INIT_ERROR", $"MainWindow.OnWindowLoaded failed: {ex.Message}");
            Log.Error(ex, "Failed to initialize MainViewModel");
            MessageBox.Show($"Failed to initialize main view: {ex.Message}", "Initialization Error", MessageBoxButton.OK, MessageBoxImage.Error);
        }

        // Dispose scope and unsubscribe events when the window is closing
        this.Closing += (_, _) =>
        {
            try
            {
                _authService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
            }
            catch { /* ignore */ }
            try
            {
                if (DataContext is ViewModels.MainViewModel vm)
                {
                    vm.PropertyChanged -= OnViewModelPropertyChanged;
                }
            }
            catch { /* ignore */ }
            try
            {
                _viewScope?.Dispose();
                _viewScope = null;
            }
            catch { /* ignore */ }
        };
    }

    private void OnViewModelPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ViewModels.MainViewModel.UseDynamicColumns))
        {
            var vm = DataContext as ViewModels.MainViewModel;
            var grid = GetDataGrid();
            if (grid == null) return;

            // Persist the column mode preference
            SettingsService.Instance.Current.UseDynamicColumns = vm?.UseDynamicColumns ?? false;
            SettingsService.Instance.Save();

            if (vm?.UseDynamicColumns == true)
            {
                BuildDynamicColumns();
            }
            else
            {
                // Switch back to static columns defined in XAML
                grid.AutoGenerateColumns = false;
                grid.Columns.Clear();
                
                // Re-add the static columns
                AddStaticColumns(grid);
            }
        }
    }

    private void AddStaticColumns(Syncfusion.UI.Xaml.Grid.SfDataGrid grid)
    {
        // Add the static columns back - unified set based on Enterprise model
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridTextColumn { HeaderText = "Id", MappingName = "Id", Width = 60 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridTextColumn { HeaderText = "Name", MappingName = "Name", Width = 150 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridTextColumn { HeaderText = "Type", MappingName = "Type", Width = 100 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Current Rate", MappingName = "CurrentRate", NumberDecimalDigits = 2, Width = 100 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Citizens Served", MappingName = "CitizenCount", NumberDecimalDigits = 0, Width = 120 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Monthly Expenses", MappingName = "MonthlyExpenses", NumberDecimalDigits = 2, Width = 130 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Annual Budget", MappingName = "TotalBudget", NumberDecimalDigits = 2, Width = 120 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Monthly Revenue", MappingName = "MonthlyRevenue", NumberDecimalDigits = 2, Width = 130 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridNumericColumn { HeaderText = "Monthly Balance", MappingName = "MonthlyBalance", NumberDecimalDigits = 2, Width = 120 });
        grid.Columns.Add(new Syncfusion.UI.Xaml.Grid.GridTextColumn { HeaderText = "Notes", MappingName = "Notes", Width = 200 });
    }

    /// <summary>
    /// Dynamically builds columns for each public property of the Enterprise model when enabled.
    /// Supports different column types based on property types and includes proper formatting.
    /// </summary>
    private void BuildDynamicColumns()
    {
        try
        {
            var vm = DataContext as ViewModels.MainViewModel;
            var grid = GetDataGrid();
            if (grid == null) return;

            grid.AutoGenerateColumns = false;
            grid.Columns.Clear();

            // Get the Enterprise type to build columns from its properties
            var enterpriseType = typeof(WileyWidget.Models.Enterprise);
            var properties = enterpriseType.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Where(p => p.CanRead && !p.GetGetMethod().IsVirtual) // Exclude navigation properties
                .Select(p => new
                {
                    Property = p,
                    DisplayAttribute = p.GetCustomAttribute(typeof(WileyWidget.Attributes.GridDisplayAttribute)) as WileyWidget.Attributes.GridDisplayAttribute
                })
                .Where(x => x.DisplayAttribute?.Visible != false) // Exclude properties marked as not visible
                .OrderBy(x => x.DisplayAttribute?.Order ?? 50)
                .Select(x => x.Property)
                .ToArray();

            foreach (var prop in properties)
            {
                var mappingName = prop.Name;

                // Get display attribute for formatting information
                var displayAttr = prop.GetCustomAttribute(typeof(WileyWidget.Attributes.GridDisplayAttribute)) as WileyWidget.Attributes.GridDisplayAttribute;

                var headerText = displayAttr?.HeaderText ?? SplitCamelCase(prop.Name);

                // Create appropriate column type based on property type
                var column = CreateColumnForProperty(prop, mappingName, headerText, displayAttr);
                if (column != null)
                {
                    grid.Columns.Add(column);
                }
            }

            Log.Information("Dynamic columns built successfully for {TypeName} with {ColumnCount} columns", 
                           enterpriseType.Name, grid.Columns.Count);
        }
        catch (Exception ex)
        {
            ErrorReportingService.Instance.ReportError(ex, "Grid_BuildDynamicColumns", showToUser: false);
            
            // Fallback to static columns with user notification
            var grid = GetDataGrid();
            if (grid != null) 
            {
                grid.AutoGenerateColumns = false;
                grid.Columns.Clear();
                AddStaticColumns(grid);
                Log.Warning("Fallback to static columns due to dynamic column build failure");
                
                // Show user-friendly message
                MessageBox.Show(
                    "Unable to display custom column layout. Using default column layout instead.\n\n" +
                    "Some advanced features may not be available.",
                    "Column Layout Fallback",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
            }
        }
    }



    /// <summary>
    /// Creates the appropriate Syncfusion column type based on the property type
    /// </summary>
    private Syncfusion.UI.Xaml.Grid.GridColumn CreateColumnForProperty(System.Reflection.PropertyInfo prop, string mappingName, string headerText, WileyWidget.Attributes.GridDisplayAttribute displayAttr = null)
    {
        var propType = prop.PropertyType;

        // Handle nullable types
        var underlyingType = Nullable.GetUnderlyingType(propType) ?? propType;

        // Skip complex types that aren't suitable for columns
        if (underlyingType.IsClass && underlyingType != typeof(string))
        {
            return null; // Skip navigation properties and complex objects
        }

        if (underlyingType == typeof(int) || underlyingType == typeof(long) ||
            underlyingType == typeof(short) || underlyingType == typeof(byte))
        {
            return new GridNumericColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                NumberDecimalDigits = displayAttr?.DecimalDigits >= 0 ? displayAttr.DecimalDigits : 0,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true
            };
        }
        else if (underlyingType == typeof(decimal))
        {
            return new GridNumericColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                NumberDecimalDigits = displayAttr?.DecimalDigits >= 0 ? displayAttr.DecimalDigits : 2,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true
            };
        }
        else if (underlyingType == typeof(double) || underlyingType == typeof(float))
        {
            return new GridNumericColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                NumberDecimalDigits = displayAttr?.DecimalDigits ?? 2,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true
            };
        }
        else if (underlyingType == typeof(DateTime))
        {
            return new GridDateTimeColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true
            };
        }
        else if (underlyingType == typeof(bool))
        {
            return new GridCheckBoxColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true
            };
        }
        else
        {
            // Default to text column for strings and other types
            return new GridTextColumn
            {
                MappingName = mappingName,
                HeaderText = headerText,
                Width = displayAttr?.Width ?? 120,
                AllowSorting = true,
                AllowFiltering = true,
                AllowEditing = mappingName != "Id" // Don't allow editing ID column
            };
        }
    }



    /// <summary>
    /// Converts camelCase or PascalCase to readable text with spaces
    /// </summary>
    private string SplitCamelCase(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;

        var result = System.Text.RegularExpressions.Regex.Replace(input, "([a-z])([A-Z])", "$1 $2");
        return result;
    }

    /// <summary>
    /// Copy selected items from the data grid to clipboard
    /// </summary>
    private void OnCopy(object sender, RoutedEventArgs e)
    {
        try
        {
            var grid = GetDataGrid();
            if (grid == null || grid.SelectedItems == null || grid.SelectedItems.Count == 0)
            {
                MessageBox.Show("Please select one or more items to copy.",
                              "No Selection",
                              MessageBoxButton.OK,
                              MessageBoxImage.Information);
                return;
            }

            var selectedItems = grid.SelectedItems;
            var stringBuilder = new System.Text.StringBuilder();

            // Add header row
            if (selectedItems.Count > 0 && selectedItems[0] != null)
            {
                var type = selectedItems[0].GetType();
                var properties = type.GetProperties()
                    .Where(p => p.CanRead)
                    .Select(p => SplitCamelCase(p.Name))
                    .ToArray();

                stringBuilder.AppendLine(string.Join("\t", properties));
            }

            // Add data rows
            foreach (var item in selectedItems)
            {
                if (item == null) continue;

                var type = item.GetType();
                var values = type.GetProperties()
                    .Where(p => p.CanRead)
                    .Select(p =>
                    {
                        try
                        {
                            var value = p.GetValue(item);
                            return value?.ToString() ?? "";
                        }
                        catch
                        {
                            return "";
                        }
                    })
                    .ToArray();

                stringBuilder.AppendLine(string.Join("\t", values));
            }

            Clipboard.SetText(stringBuilder.ToString());
            Log.Information("Copied {Count} items to clipboard", selectedItems.Count);
        }
        catch (Exception ex)
        {
            ErrorReportingService.Instance.ReportError(ex, "Grid_OnCopy", showToUser: true);
        }
    }

    /// <summary>
    /// Paste items from clipboard to the data grid
    /// </summary>
    private void OnPaste(object sender, RoutedEventArgs e)
    {
        // Check role-based access: only admins can paste
        var viewModel = DataContext as ViewModels.MainViewModel;
        if (viewModel == null || !viewModel.IsUserAdmin)
        {
            MessageBox.Show("Paste operation is restricted to administrators only.",
                          "Access Denied",
                          MessageBoxButton.OK,
                          MessageBoxImage.Warning);
            return;
        }

        try
        {
            if (!Clipboard.ContainsText())
            {
                MessageBox.Show("Clipboard does not contain text data.",
                              "No Text Data",
                              MessageBoxButton.OK,
                              MessageBoxImage.Information);
                return;
            }

            var clipboardText = Clipboard.GetText();
            var lines = clipboardText.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries);

            if (lines.Length < 2) // Need at least header + 1 data row
            {
                MessageBox.Show("Clipboard data must contain headers and at least one data row.",
                              "Invalid Format",
                              MessageBoxButton.OK,
                              MessageBoxImage.Warning);
                return;
            }

            var vm = DataContext as ViewModels.MainViewModel;
            if (vm == null) return;

            // Parse header to understand column mapping
            var headers = lines[0].Split('\t').Select(h => h.Trim()).ToArray();
            var pastedCount = 0;
            var skippedCount = 0;

            // Create new items from data rows
            for (int i = 1; i < lines.Length; i++)
            {
                var values = lines[i].Split('\t').Select(v => v.Trim()).ToArray();

                // Skip malformed rows
                if (values.Length != headers.Length)
                {
                    Log.Warning("Skipping row {Row}: expected {Expected} columns, got {Actual}", i + 1, headers.Length, values.Length);
                    skippedCount++;
                    continue;
                }

                try
                {
                    // Create header-value mapping for this row
                    var headerValueMap = new Dictionary<string, string>();
                    for (int j = 0; j < headers.Length; j++)
                    {
                        if (!string.IsNullOrWhiteSpace(headers[j]) && !string.IsNullOrWhiteSpace(values[j]))
                        {
                            headerValueMap[headers[j]] = values[j];
                        }
                    }

                    // Skip rows with no valid data
                    if (headerValueMap.Count == 0)
                    {
                        Log.Warning("Skipping row {Row}: no valid data found", i + 1);
                        skippedCount++;
                        continue;
                    }

                    // Create new Enterprise instance using repository mapping
                    var newEnterprise = vm.CreateEnterpriseFromHeaderMapping(headerValueMap);

                    // Set default values for required properties if not provided
                    if (string.IsNullOrWhiteSpace(newEnterprise.Name))
                        newEnterprise.Name = $"Imported Enterprise {vm.Enterprises.Count + 1}";
                    if (string.IsNullOrWhiteSpace(newEnterprise.Type))
                        newEnterprise.Type = "Utility";

                    // Only set defaults for numeric fields if they weren't explicitly provided
                    // (0 might be a valid value from the data)
                    if (newEnterprise.CurrentRate == 0 && !WasFieldProvided(headerValueMap, "currentrate", "rate", "current rate"))
                        newEnterprise.CurrentRate = 25.00M;
                    if (newEnterprise.MonthlyExpenses == 0 && !WasFieldProvided(headerValueMap, "monthlyexpenses", "expenses", "monthly expenses"))
                        newEnterprise.MonthlyExpenses = 1000.00M;
                    if (newEnterprise.CitizenCount == 0 && !WasFieldProvided(headerValueMap, "citizencount", "citizens", "count", "citizen count"))
                        newEnterprise.CitizenCount = 100;

                    // Generate unique ID
                    var nextId = vm.Enterprises.Count == 0 ? 1 : vm.Enterprises.Max(e => e.Id) + 1;
                    newEnterprise.Id = nextId;

                    // Add to collection
                    vm.Enterprises.Add(newEnterprise);
                    pastedCount++;
                }
                catch (Exception ex)
                {
                    Log.Warning(ex, "Failed to create enterprise from clipboard row {Row}", i + 1);
                    skippedCount++;
                }
            }

            // Show results to user
            var message = $"Successfully pasted {pastedCount} enterprise(s).";
            if (skippedCount > 0)
                message += $" {skippedCount} row(s) were skipped due to errors.";

            MessageBox.Show(message, "Paste Complete",
                          MessageBoxButton.OK,
                          pastedCount > 0 ? MessageBoxImage.Information : MessageBoxImage.Warning);

            Log.Information("Pasted {PastedCount} items from clipboard, skipped {SkippedCount}", pastedCount, skippedCount);
        }
        catch (Exception ex)
        {
            ErrorReportingService.Instance.ReportError(ex, "Grid_OnPaste", showToUser: true);
        }
    }

    /// <summary>
    /// Helper method to parse decimal values, handling currency symbols and formatting
    /// </summary>
    private bool TryParseDecimal(string value, out decimal result)
    {
        // Remove common currency symbols and formatting
        var cleanValue = value.Replace("$", "").Replace(",", "").Replace(" ", "").Trim();

        // Try parsing with various number styles
        return decimal.TryParse(cleanValue,
            System.Globalization.NumberStyles.Number |
            System.Globalization.NumberStyles.Currency |
            System.Globalization.NumberStyles.AllowDecimalPoint,
            System.Globalization.CultureInfo.CurrentCulture,
            out result);
    }

    /// <summary>
    /// Helper method to check if a field was provided in the header-value mapping
    /// </summary>
    private bool WasFieldProvided(IDictionary<string, string> headerValueMap, params string[] fieldNames)
    {
        foreach (var kvp in headerValueMap)
        {
            var normalizedHeader = kvp.Key.Replace(" ", "").Replace("-", "").Replace("_", "").ToLowerInvariant();
            if (fieldNames.Any(field => normalizedHeader.Contains(field.ToLowerInvariant())))
            {
                return true;
            }
        }
        return false;
    }

    /// <summary>
    /// Helper method to check if a field was provided in the data (not empty)
    /// </summary>
    private bool WasFieldProvided(string[] headers, string[] values, params string[] fieldNames)
    {
        for (int i = 0; i < headers.Length; i++)
        {
            var normalizedHeader = headers[i].Replace(" ", "").Replace("-", "").Replace("_", "").ToLowerInvariant();
            if (fieldNames.Any(field => normalizedHeader.Contains(field.ToLowerInvariant())))
            {
                if (!string.IsNullOrWhiteSpace(values[i]))
                    return true;
            }
        }
        return false;
    }

    /// <summary>
    /// Attempt to apply a Syncfusion theme; falls back to Fluent Light if requested theme fails (e.g., renamed or removed).
    /// </summary>
    private void TryApplyTheme(string themeName)
    {
        ThemeUtility.TryApplyTheme(this, themeName);
    }



    /// <summary>Switch to Fluent Dark theme and persist choice.</summary>
    private void OnFluentDark(object sender, RoutedEventArgs e)
    {
    TryApplyTheme("FluentDark");
    SettingsService.Instance.Current.Theme = "FluentDark";
        SettingsService.Instance.Save();
    Log.Information("Theme changed to {Theme}", "Fluent Dark");
    UpdateThemeToggleVisuals();
    }
    /// <summary>Switch to Fluent Light theme and persist choice.</summary>
    private void OnFluentLight(object sender, RoutedEventArgs e)
    {
    TryApplyTheme("FluentLight");
    SettingsService.Instance.Current.Theme = "FluentLight";
        SettingsService.Instance.Save();
    Log.Information("Theme changed to {Theme}", "Fluent Light");
        UpdateThemeToggleVisuals();
    }

    private void UpdateThemeToggleVisuals()
    {
        var current = Services.ThemeUtility.NormalizeTheme(SettingsService.Instance.Current.Theme);
        var btnDark = FindName("BtnFluentDark") as RibbonButton;
        if (btnDark != null)
        {
            btnDark.IsEnabled = current != "FluentDark";
            btnDark.Label = current == "FluentDark" ? "✔ Fluent Dark" : "Fluent Dark";
        }
        var btnLight = FindName("BtnFluentLight") as RibbonButton;
        if (btnLight != null)
        {
            btnLight.IsEnabled = current != "FluentLight";
            btnLight.Label = current == "FluentLight" ? "✔ Fluent Light" : "Fluent Light";
        }
    }
    /// <summary>Display modal About dialog with version information.</summary>
    private void OnAbout(object sender, RoutedEventArgs e)
    {
        var about = new AboutWindow { Owner = this };
        about.ShowDialog();
    }

    /// <summary>
    /// Restores last known window bounds (only if previously saved). Maximized state is applied after window is loaded
    /// to avoid layout measurement issues during construction.
    /// </summary>
    private void RestoreWindowState()
    {
        var s = SettingsService.Instance.Current;
        if (s.WindowWidth.HasValue) Width = s.WindowWidth.Value;
        if (s.WindowHeight.HasValue) Height = s.WindowHeight.Value;
        if (s.WindowLeft.HasValue) Left = s.WindowLeft.Value;
        if (s.WindowTop.HasValue) Top = s.WindowTop.Value;
    }

    /// <summary>
    /// Applies persisted maximized state post-load. Separated for clarity and potential future animation hooks.
    /// </summary>
    private void ApplyMaximized()
    {
        var s = SettingsService.Instance.Current;
        if (s.WindowMaximized == true)
            WindowState = WindowState.Maximized;
    }

    /// <summary>
    /// Persists window bounds only when in Normal state to avoid capturing the restored size of a maximized window.
    /// </summary>
    private void PersistWindowState()
    {
        var s = SettingsService.Instance.Current;
        s.WindowMaximized = WindowState == WindowState.Maximized;
        if (WindowState == WindowState.Normal)
        {
            s.WindowWidth = Width;
            s.WindowHeight = Height;
            s.WindowLeft = Left;
            s.WindowTop = Top;
        }
        SettingsService.Instance.Save();
    }

    /// <summary>
    /// Opens the Enterprise Management panel
    /// </summary>
    private void OnEnterpriseManagement(object sender, RoutedEventArgs e)
    {
        try
        {
            ActivateDockingPanel("EnterprisePanel");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open Enterprise Management: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Opens the Budget Analysis panel
    /// </summary>
    private void OnBudgetAnalysis(object sender, RoutedEventArgs e)
    {
        try
        {
            ActivateDockingPanel("BudgetPanel");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open Budget Analysis: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Opens the Customer Management window
    /// </summary>
    private void OnCustomerManagement(object sender, RoutedEventArgs e)
    {
        try
        {
            UtilityCustomerView.ShowCustomerWindow();
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open Customer Management: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    private void OnToggleDynamicColumns(object sender, RoutedEventArgs e)
    {
        try
        {
            var grid = GetDataGrid();
            if (grid == null) return;
            
            // Toggle the ViewModel property which will trigger the property changed event
            if (DataContext is ViewModels.MainViewModel vm)
            {
                vm.UseDynamicColumns = !vm.UseDynamicColumns;
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to toggle column mode");
            MessageBox.Show($"Failed to toggle column mode: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Opens the AI Assistant panel
    /// </summary>
    private void OnAIAssist(object sender, RoutedEventArgs e)
    {
        try
        {
            ActivateDockingPanel("AIAssistPanel");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open AI Assistant: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Opens the Settings panel
    /// </summary>
    private void OnSettings(object sender, RoutedEventArgs e)
    {
        try
        {
            ActivateDockingPanel("SettingsPanel");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open Settings: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Opens the Dashboard panel
    /// </summary>
    private void OnDashboard(object sender, RoutedEventArgs e)
    {
        try
        {
            ActivateDockingPanel("DashboardPanel");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to open Dashboard: {ex.Message}",
                          "Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
    }

    /// <summary>
    /// Handles keyboard shortcuts by delegating to existing event handlers
    /// </summary>
    private void HandleKeyboardShortcut(string action)
    {
        try
        {
            switch (action)
            {
                case "Settings":
                    OnSettings(null, null);
                    break;
                case "Dashboard":
                    OnDashboard(null, null);
                    break;
                case "AIAssist":
                    OnAIAssist(null, null);
                    break;
                case "Enterprise":
                    OnEnterpriseManagement(null, null);
                    break;
                case "Budget":
                    OnBudgetAnalysis(null, null);
                    break;
                case "About":
                    OnAbout(null, null);
                    break;
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to handle keyboard shortcut for {Action}", action);
        }
    }

    /// <summary>
    /// Handles window-level keyboard shortcuts
    /// </summary>
    private void OnKeyDown(object sender, KeyEventArgs e)
    {
        // Only handle if Ctrl is pressed
        if ((Keyboard.Modifiers & ModifierKeys.Control) != ModifierKeys.Control)
            return;

        string action = null;
        switch (e.Key)
        {
            case Key.S:
                if ((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift)
                    action = "Settings";
                break;
            case Key.D:
                if ((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift)
                    action = "Dashboard";
                else
                    action = "AIAssist";
                break;
            case Key.E:
                action = "Enterprise";
                break;
            case Key.B:
                action = "Budget";
                break;
            case Key.A:
                if ((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift)
                    action = "About";
                break;
        }

        if (action != null)
        {
            HandleKeyboardShortcut(action);
            e.Handled = true;
        }
    }

    /// <summary>
    /// Handles Azure AD sign in
    /// </summary>
    private async void OnSignIn(object sender, RoutedEventArgs e)
    {
        try
        {
            var signInButton = FindName("BtnSignIn") as dynamic;
            if (signInButton != null) signInButton.IsEnabled = false;
            var result = await _authService.SignInAsync();

            MessageBox.Show($"Successfully signed in as {result.Account.Username}",
                          "Sign In Successful",
                          MessageBoxButton.OK,
                          MessageBoxImage.Information);

            UpdateAuthenticationUI();
        }
        catch (AuthenticationException ex)
        {
            MessageBox.Show($"Sign in failed: {ex.Message}",
                          "Sign In Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Unexpected error during sign in: {ex.Message}",
                          "Sign In Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
        finally
        {
            var signInButton = FindName("BtnSignIn") as dynamic;
            if (signInButton != null) signInButton.IsEnabled = true;
        }
    }

    /// <summary>
    /// Handles Azure AD sign out
    /// </summary>
    private async void OnSignOut(object sender, RoutedEventArgs e)
    {
        try
        {
            var signOutButton = FindName("BtnSignOut") as dynamic;
            if (signOutButton != null) signOutButton.IsEnabled = false;
            await _authService.SignOutAsync();

            MessageBox.Show("Successfully signed out",
                          "Sign Out Successful",
                          MessageBoxButton.OK,
                          MessageBoxImage.Information);

            UpdateAuthenticationUI();
        }
        catch (AuthenticationException ex)
        {
            MessageBox.Show($"Sign out failed: {ex.Message}",
                          "Sign Out Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Unexpected error during sign out: {ex.Message}",
                          "Sign Out Error",
                          MessageBoxButton.OK,
                          MessageBoxImage.Error);
        }
        finally
        {
            var signOutButton = FindName("BtnSignOut") as dynamic;
            if (signOutButton != null) signOutButton.IsEnabled = true;
        }
    }

    /// <summary>
    /// Updates the authentication UI based on current authentication state
    /// </summary>
    private void UpdateAuthenticationUI()
    {
        // Ensure we're on the UI thread
        if (!Dispatcher.CheckAccess())
        {
            try
            {
                Dispatcher.Invoke(() => UpdateAuthenticationUI());
            }
            catch (Exception ex)
            {
                Log.Warning(ex, "Failed to invoke UpdateAuthenticationUI on UI thread");
            }
            return;
        }

        try
        {
            if (_authService == null)
            {
                Log.Debug("Authentication service is not available - skipping authentication UI update");
                // Update DataContext to a signed-out safe state if possible
                if (DataContext is ViewModels.MainViewModel vmFallback)
                {
                    vmFallback.CurrentUserName = "Not signed in";
                    vmFallback.CurrentUserEmail = string.Empty;
                    vmFallback.IsUserAdmin = false;
                    vmFallback.UserRoles = new List<string>();
                }
                return;
            }

            if (_authService.IsAuthenticated)
            {
                var signInButton = FindName("BtnSignIn") as dynamic;
                if (signInButton != null) signInButton.IsEnabled = false;
                var signOutButton = FindName("BtnSignOut") as dynamic;
                if (signOutButton != null) signOutButton.IsEnabled = true;

                // Update the view model with current user info
                var viewModel = DataContext as ViewModels.MainViewModel;
                if (viewModel != null)
                {
                    var userInfo = _authService.GetUserInfo();
                    if (userInfo != null)
                    {
                        viewModel.CurrentUserName = userInfo.Name ?? "";
                        viewModel.CurrentUserEmail = userInfo.Username ?? string.Empty; // For now, use username as email placeholder
                        viewModel.IsUserAdmin = userInfo.IsAdmin;
                        viewModel.UserRoles = userInfo.Roles ?? new List<string>();
                    }
                    else
                    {
                        Log.Warning("AuthenticationService reported IsAuthenticated=true but GetUserInfo() returned null");
                    }
                }
            }
            else
            {
                var signInButton = FindName("BtnSignIn") as dynamic;
                if (signInButton != null) signInButton.IsEnabled = true;
                var signOutButton = FindName("BtnSignOut") as dynamic;
                if (signOutButton != null) signOutButton.IsEnabled = false;

                // Update the view model
                var viewModel = DataContext as ViewModels.MainViewModel;
                if (viewModel != null)
                {
                    viewModel.CurrentUserName = "Not signed in";
                    viewModel.CurrentUserEmail = string.Empty;
                    viewModel.IsUserAdmin = false;
                    viewModel.UserRoles = new List<string>();
                }
            }
        }
        catch (Exception ex)
        {
            // Report and log but avoid crashing the UI
            ErrorReportingService.Instance.ReportError(ex, "UpdateAuthenticationUI", showToUser: false);
            Log.Error(ex, "Unhandled exception while updating authentication UI");
        }
    }

    /// <summary>
    /// Activates a dockable panel in the DockingManager
    /// </summary>
    private void ActivateDockingPanel(string panelName)
    {
        try
        {
            var dockingManager = FindName("MainDockingManager") as Syncfusion.Windows.Tools.Controls.DockingManager;
            if (dockingManager == null) return;

            // Find the content control by name
            var contentControl = FindName(panelName) as System.Windows.Controls.ContentControl;
            if (contentControl == null) return;

            // Set the state to Document to make it active/visible
            Syncfusion.Windows.Tools.Controls.DockingManager.SetState(contentControl, Syncfusion.Windows.Tools.Controls.DockState.Document);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Failed to activate docking panel {PanelName}", panelName);
        }
    }

    /// <summary>
    /// Handles authentication state changes
    /// </summary>
    private void OnAuthenticationStateChanged(object sender, AuthenticationEventArgs e)
    {
        // Update UI on UI thread
        Dispatcher.Invoke(() => UpdateAuthenticationUI());
    }

    /// <summary>
    /// Handles key down events in the AI message input
    /// </summary>
    private void OnAIMessageKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
    {
        if (e.Key == System.Windows.Input.Key.Enter && !System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key.LeftShift))
        {
            // Send message on Enter (but allow Shift+Enter for new lines)
            if (DataContext is ViewModels.MainViewModel vm && vm.SendAIMessageCommand.CanExecute(null))
            {
                vm.SendAIMessageCommand.Execute(null);
                e.Handled = true;
            }
        }
    }
}
