{
  "Azure CLI": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "azure-cli                         2.76.0\r\n\r\ncore                              2.76.0\r\ntelemetry                          1.1.0\r\n\r\nDependencies:\r\nmsal                            1.33.0b1\r\nazure-mgmt-resource               23.3.0\r\n\r\nPython location 'C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\python.exe'\r\nConfig directory 'C:\\Users\\biges\\.azure'\r\nExtensions directory 'C:\\Users\\biges\\.azure\\cliextensions'\r\n\r\nPython (Windows) 3.12.10 (tags/v3.12.10:0cc8128, Apr  8 2025, 12:21:36) [MSC v.1943 64 bit (AMD64)]\r\n\r\nLegal docs and information: aka.ms/AzureCliLegal\r\n\r\n\r\nYour CLI is up-to-date.\r\n"
  },
  "NPM": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "10.8.2\n"
  },
  "Build Scripts": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "35 PowerShell script(s) found"
  },
  "GitHub CLI": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "gh version 2.74.0 (2025-05-29)\nhttps://github.com/cli/cli/releases/tag/v2.74.0\n"
  },
  "Trunk CLI": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "1.25.0\r\n"
  },
  "GitHub Actions": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "4 workflow(s) found"
  },
  "NuGet": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "NuGet Command Line 6.14.0.116\r\n\r\nUsage: dotnet nuget [options] [command]\r\n\r\nOptions:\r\n  -h|--help  Show help information\r\n  --version  Show version information\r\n\r\nCommands:\r\n  add      Add a NuGet source.\r\n  config   NuGet configuration CLI\r\n  delete   Deletes a package from the server.\r\n  disable  Disable a NuGet source.\r\n  enable   Enable a NuGet source.\r\n  list     List configured NuGet sources.\r\n  locals   Clears or lists local NuGet resources such as http requests cache, packages folder, plugin operations cache  or machine-wide global packages folder.\r\n  push     Pushes a package to the server and publishes it.\r\n  remove   Remove a NuGet source.\r\n  sign     Signs NuGet package(s) at <package-paths> with the specified certificate.\r\n  trust    Manage the trusted signers.\r\n  update   Update a NuGet source.\r\n  verify   Verifies a signed NuGet package.\r\n  why      Shows the dependency graph for a particular package for a given project or solution.\r\n\r\nUse \"dotnet nuget [command] --help\" for more information about a command.\r\n\r\n"
  },
  "Git": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "git version 2.49.0.windows.1\n"
  },
  ".NET SDK": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "9.0.304\r\n"
  },
  "MSBuild": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "Description:\r\n  .NET Builder\r\n\r\nUsage:\r\n  dotnet build [<PROJECT | SOLUTION>...] [options]\r\n\r\nArguments:\r\n  <PROJECT | SOLUTION>  The project or solution file to operate on. If a file is not specified, the command will search the current directory for one.\r\n\r\nOptions:\r\n  --ucr, --use-current-runtime         Use current runtime as the target runtime.\r\n  -f, --framework <FRAMEWORK>          The target framework to build for. The target framework must also be specified in the project file.\r\n  -c, --configuration <CONFIGURATION>  The configuration to use for building the project. The default for most projects is 'Debug'.\r\n  -r, --runtime <RUNTIME_IDENTIFIER>   The target runtime to build for.\r\n  --version-suffix <VERSION_SUFFIX>    Set the value of the $(VersionSuffix) property to use when building the project.\r\n  --no-restore                         Do not restore the project before building.\r\n  --interactive                        Allows the command to stop and wait for user input or action (for example to complete authentication).\r\n  -v, --verbosity <LEVEL>              Set the MSBuild verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].\r\n  --debug\r\n  -o, --output <OUTPUT_DIR>            The output directory to place built artifacts in.\r\n  --artifacts-path <ARTIFACTS_DIR>     The artifacts path. All output from the project, including build, publish, and pack output, will go in subfolders under the specified path.\r\n  --no-incremental                     Do not use incremental building.\r\n  --no-dependencies                    Do not build project-to-project references and only build the specified project.\r\n  --nologo                             Do not display the startup banner or the copyright message.\r\n  --sc, --self-contained               Publish the .NET runtime with your application so the runtime doesn't need to be installed on the target machine.\r\n                                       The default is 'false.' However, when targeting .NET 7 or lower, the default is 'true' if a runtime identifier is specified.\r\n  --no-self-contained                  Publish your application as a framework dependent application. A compatible .NET runtime must be installed on the target machine to run your application.\r\n  -a, --arch <ARCH>                    The target architecture.\r\n  --os <OS>                            The target operating system.\r\n  --disable-build-servers              Force the command to ignore any persistent build servers.\r\n  -?, -h, --help                       Show command line help.\r\n\r\n"
  },
  "PowerShell": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "PowerShell 7.5.2\r\n"
  },
  "Trunk Config": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "Valid config with ~0 linters"
  },
  "Trunk Check": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "universal code checker\r\n\r\n\u001b[1musage\r\n  \u001b[0mtrunk check [flags] [paths...] [subcommand]\r\n\u001b[1m\r\nargs\r\n\u001b[0m  paths                       files or directories to check (if omitted, checks all changed files)\r\n\u001b[1m\r\nflags\r\n\u001b[0m  -h, --help                  usage information\r\n  -a, --all                   check all files instead of only changed files\r\n  -y, --fix                   automatically apply all fixes without prompting\r\n  -n, --no-fix                don't automatically apply fixes\r\n      --include-existing-autofixes,--show-existing\r\n                              show autofixes for existing issues\r\n      --ignore-git-state      run linters even if a merge, rebase, or revert is in progress\r\n      --force                 run on all files, even if ignored\r\n      --diff                  diff printing mode {none | compact | full}\r\n      --filter                comma separated list of linters and/or issue codes to include or exclude (use minus to exclude, e.g. '-eslint,-shellcheck/SC2301')\r\n      --exclude               shorthand for an inverse --filter\r\n      --ignore                Glob pattern to exclude files from linting (e.g. 'docs/**/*.md')\r\n      --cache                 cache lint results from previous runs (default 'true')\r\n  -j, --jobs                  number of concurrent jobs (does not affect background linting)\r\n      --sample                run each linter on N files (implies --no-fix and --all if no paths are given)\r\n      --upstream              upstream branch used to compute changed files (autodetected by default)\r\n      --scope                 scope of checks to run {all | security}\r\n      --print-failures        print any failures that occur (default on for --ci)\r\n      --index                 run linter on git-indexed files\r\n      --index-file            run linter on git-indexed files based on specified index\r\n      --commit-ref            commit ref to lint (instead of current working tree)\r\n      --commit-ref-from-pre-push\r\n                              commit ref to lint from the stdin of a pre-push git hook (instead of current working tree)\r\n      --version               the version\r\n      --monitor               enable the trunk daemon to monitor file changes in your repo\r\n      --ci                    run in continuous integration mode\r\n      --no-progress           don't show progress updates\r\n      --ci-progress           rate limit progress updates to every 30s (implied by --ci)\r\n      --action_timeout        timeout for downloads, lint runs, etc\r\n  -v, --verbose               output details about what's happening under the hood\r\n      --color                 enable/disable color output\r\n\u001b[1m\r\nupload flags\r\n\u001b[0m      --token                 trunk api token\r\n      --upload                upload lint results to the trunk web app\r\n      --series                series name for this upload (usually the branch)\r\n      --replace               overwrite previously uploaded check run if one exists\r\n\u001b[1m\r\nsubcommands\r\n\u001b[0m  github_annotate             upload a previously saved annotation file to github\r\n  enable                      enable linters\r\n  disable                     disable linters\r\n  list                        list all available linters\r\n\r\n\r\n\u001b[1mlearn more\u001b[0m\r\n  docs                        https://docs.trunk.io\r\n  help/feedback               https://slack.trunk.io\r\n"
  },
  "VSTest": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "Description:\r\n  .NET Test Driver\r\n\r\nUsage:\r\n  dotnet test [options] [[--] <additional arguments>...]]\r\n\r\nOptions:\r\n  -s, --settings <SETTINGS_FILE>       The settings file to use when running tests.\r\n  -t, --list-tests                     List the discovered tests instead of running the tests.\r\n  -e, --environment <NAME=\"VALUE\">     Sets the value of an environment variable. \r\n                                       Creates the variable if it does not exist, overrides if it does. \r\n                                       This will force the tests to be run in an isolated process. \r\n                                       This argument can be specified multiple times to provide multiple variables.\r\n  \r\n                                       Examples:\r\n                                       -e VARIABLE=abc\r\n                                       -e VARIABLE=\"value with spaces\"\r\n                                       -e VARIABLE=\"value;seperated with;semicolons\"\r\n                                       -e VAR1=abc -e VAR2=def -e VAR3=ghi\r\n  --filter <EXPRESSION>                Run tests that match the given expression.\r\n                                                                               Examples:\r\n                                                                               Run tests with priority set to 1: --filter \"Priority = 1\"\r\n                                                                               Run a test with the specified full name: --filter \"FullyQualifiedName=Namespace.ClassName.MethodName\"\r\n                                                                               Run tests that contain the specified name: --filter \"FullyQualifiedName~Namespace.Class\"\r\n                                                                               See https://aka.ms/vstest-filtering for more information on filtering support.\r\n  --test-adapter-path <ADAPTER_PATH>   The path to the custom adapters to use for the test run.\r\n  -l, --logger <LOGGER>                The logger to use for test results.\r\n                                                                               Examples:\r\n                                                                               Log in trx format using a unique file name: --logger trx\r\n                                                                               Log in trx format using the specified file name: --logger \"trx;LogFileName=<TestResults.trx>\"\r\n                                                                               See https://aka.ms/vstest-report for more information on logger arguments.\r\n  -o, --output <OUTPUT_DIR>            The output directory to place built artifacts in.\r\n  --artifacts-path <ARTIFACTS_DIR>     The artifacts path. All output from the project, including build, publish, and pack output, will go in subfolders under the specified path.\r\n  -d, --diag <LOG_FILE>                Enable verbose logging to the specified file.\r\n  --no-build                           Do not build the project before testing. Implies --no-restore.\r\n  --results-directory <RESULTS_DIR>    The directory where the test results will be placed.\r\n                                       The specified directory will be created if it does not exist.\r\n  --collect <DATA_COLLECTOR_NAME>      The friendly name of the data collector to use for the test run.\r\n                                                                               More info here: https://aka.ms/vstest-collect\r\n  --blame                              Runs the tests in blame mode. This option is helpful in isolating problematic tests that cause the test host to crash or hang, but it does not create a memory dump by default. \r\n  \r\n                                       When a crash is detected, it creates an sequence file in TestResults/guid/guid_Sequence.xml that captures the order of tests that were run before the crash.\r\n  \r\n                                       Based on the additional settings, hang dump or crash dump can also be collected.\r\n  \r\n                                       Example: \r\n                                         Timeout the test run when test takes more than the default timeout of 1 hour, and collect crash dump when the test host exits unexpectedly. \r\n                                         (Crash dumps require additional setup, see below.)\r\n                                         dotnet test --blame-hang --blame-crash\r\n                                       Example: \r\n                                         Timeout the test run when a test takes more than 20 minutes and collect hang dump. \r\n                                         dotnet test --blame-hang-timeout 20min\r\n  --blame-crash                        Runs the tests in blame mode and collects a crash dump when the test host exits unexpectedly. This option depends on the version of .NET used, the type of error, and the operating system.\r\n  \r\n                                       For exceptions in managed code, a dump will be automatically collected on .NET 5.0 and later versions. It will generate a dump for testhost or any child process that also ran on .NET 5.0 and crashed. Crashes in native code will not generate a dump. This option works on Windows, macOS, and Linux.\r\n  \r\n                                       Crash dumps in native code, or when targetting .NET Framework, or .NET Core 3.1 and earlier versions, can only be collected on Windows, by using Procdump. A directory that contains procdump.exe and procdump64.exe must be in the PATH or PROCDUMP_PATH environment variable.\r\n  \r\n                                       The tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n  \r\n                                       To collect a crash dump from a native application running on .NET 5.0 or later, the usage of Procdump can be forced by setting the VSTEST_DUMP_FORCEPROCDUMP environment variable to 1.\r\n  \r\n                                       Implies --blame.\r\n  --blame-crash-dump-type <DUMP_TYPE>  The type of crash dump to be collected. Supported values are full (default) and mini. Implies --blame-crash.\r\n  --blame-crash-collect-always         Enables collecting crash dump on expected as well as unexpected testhost exit.\r\n  --blame-hang                         Run the tests in blame mode and enables collecting hang dump when test exceeds the given timeout. Implies --blame-hang.\r\n  --blame-hang-dump-type <DUMP_TYPE>   The type of crash dump to be collected. The supported values are full (default), mini, and none. When 'none' is used then test host is terminated on timeout, but no dump is collected. Implies --blame-hang.\r\n  --blame-hang-timeout <TIMESPAN>      Per-test timeout, after which hang dump is triggered and the testhost process is terminated. Default is 1h.\r\n                                       The timeout value is specified in the following format: 1.5h / 90m / 5400s / 5400000ms. When no unit is used (e.g. 5400000), the value is assumed to be in milliseconds.\r\n                                       When used together with data driven tests, the timeout behavior depends on the test adapter used. For xUnit, NUnit and MSTest 2.2.4+ the timeout is renewed after every test case,\r\n                                       For MSTest before 2.2.4, the timeout is used for all testcases.\r\n  --nologo                             Run test(s), without displaying Microsoft Testplatform banner\r\n  -c, --configuration <CONFIGURATION>  The configuration to use for running tests. The default for most projects is 'Debug'.\r\n  -f, --framework <FRAMEWORK>          The target framework to run tests for. The target framework must also be specified in the project file.\r\n  -r, --runtime <RUNTIME_IDENTIFIER>   The target runtime to test for.\r\n  --no-restore                         Do not restore the project before building.\r\n  --interactive                        Allows the command to stop and wait for user input or action (for example to complete authentication).\r\n  -v, --verbosity <LEVEL>              Set the MSBuild verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].\r\n  -a, --arch <ARCH>                    The target architecture.\r\n  --os <OS>                            The target operating system.\r\n  --disable-build-servers              Force the command to ignore any persistent build servers.\r\n  -?, -h, --help                       Show command line help.\r\n\r\nAdditional Arguments:\r\n  Arguments passed to the application that is being run.\r\n\r\n"
  },
  "Node.js": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "v20.17.0\r\n"
  },
  "Azure Account": {
    "ExitCode": 0,
    "Status": "OK",
    "Output": "{\r\n  \"environmentName\": \"AzureCloud\",\r\n  \"homeTenantId\": \"cb097857-10d5-410b-8e09-6073de3ab035\",\r\n  \"id\": \"89c2076a-8c6f-41fe-b03c-850d46a57abf\",\r\n  \"isDefault\": true,\r\n  \"managedByTenants\": [],\r\n  \"name\": \"Azure subscription 1\",\r\n  \"state\": \"Enabled\",\r\n  \"tenantDefaultDomain\": \"bigessfourgmail500.onmicrosoft.com\",\r\n  \"tenantDisplayName\": \"Default Directory\",\r\n  \"tenantId\": \"cb097857-10d5-410b-8e09-6073de3ab035\",\r\n  \"user\": {\r\n    \"name\": \"bigessfour@gmail.com\",\r\n    \"type\": \"user\"\r\n  }\r\n}\r\n"
  }
}
