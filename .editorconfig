# EditorConfig is awesome: https://EditorConfig.org
# Practical code analysis rules for WileyWidget - HOBBY PROJECT CONFIGURATION
# Goal: Catch real bugs and learn best practices without breaking the flow
# Tuned for: Learning, experimentation, and having fun coding
root = true

# All files
[*]
charset = utf-8
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true

# Code files
[*.{cs,csx,vb,vbx}]
indent_style = space
indent_size = 4

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_style = space
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_style = space
indent_size = 2

# JSON files
[*.{json,json5,webmanifest}]
indent_style = space
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_style = space
indent_size = 2

# Python files
[*.{py,pyi}]
indent_style = space
indent_size = 4
trim_trailing_whitespace = true
insert_final_newline = true

# Python requirements files
[requirements*.txt]
indent_style = space
indent_size = 4

# Markdown files
[*.md]
trim_trailing_whitespace = false

# Web files
[*.{htm,html,js,jsm,ts,tsx,css,sass,scss,less,svg,vue}]
indent_style = space
indent_size = 2

##########################
# .NET Code Analysis Rules - PRACTICAL FOCUS
##########################

[*.{cs,vb}]

# CRITICAL SECURITY RULES - Hobby Project Level (Learning-focused)
dotnet_diagnostic.CA2100.severity = warning  # SQL injection prevention (good to learn)
dotnet_diagnostic.CA2109.severity = suggestion # Review visible event handlers
dotnet_diagnostic.CA2153.severity = warning  # Do not catch corrupted state exceptions
dotnet_diagnostic.CA2300.severity = suggestion # Insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2301.severity = suggestion # Do not call BinaryFormatter.Deserialize
dotnet_diagnostic.CA3001.severity = suggestion # Review code for SQL injection
dotnet_diagnostic.CA3003.severity = suggestion # Review code for file path injection
dotnet_diagnostic.CA3006.severity = suggestion # Review code for process command injection
dotnet_diagnostic.CA5350.severity = suggestion # Do not use weak cryptographic algorithms
dotnet_diagnostic.CA5351.severity = suggestion # Do not use broken cryptographic algorithms
dotnet_diagnostic.CA5359.severity = suggestion # Do not disable certificate validation
dotnet_diagnostic.CA5360.severity = suggestion # Do not call dangerous methods in deserialization
dotnet_diagnostic.CA5397.severity = suggestion # Do not use deprecated SslProtocols values

# RELIABILITY RULES - Prevent crashes and critical failures
dotnet_diagnostic.CA1001.severity = warning  # Types that own disposable fields should be disposable
dotnet_diagnostic.CA1065.severity = error    # Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1304.severity = warning  # Specify CultureInfo
dotnet_diagnostic.CA1816.severity = warning  # Dispose methods should call SuppressFinalize
dotnet_diagnostic.CA1820.severity = warning  # Test for empty strings using string length
dotnet_diagnostic.CA2000.severity = warning  # Dispose objects before losing scope
dotnet_diagnostic.CA2002.severity = warning  # Do not lock on objects with weak identity
dotnet_diagnostic.CA2007.severity = none     # Consider using ConfigureAwait (too noisy for desktop apps)
dotnet_diagnostic.CA2213.severity = warning  # Disposable fields should be disposed
dotnet_diagnostic.CA2215.severity = warning  # Dispose methods should call base class dispose

# PERFORMANCE RULES - Practical optimizations only
dotnet_diagnostic.CA1802.severity = suggestion # Use literals where appropriate
dotnet_diagnostic.CA1812.severity = suggestion # Avoid uninstantiated internal classes
dotnet_diagnostic.CA1822.severity = suggestion # Mark members as static
dotnet_diagnostic.CA1823.severity = suggestion # Avoid unused private fields

# ESSENTIAL DESIGN RULES - Just the important ones
dotnet_diagnostic.CA1031.severity = suggestion # Do not catch general exception types
dotnet_diagnostic.CA1041.severity = warning    # Provide ObsoleteAttribute message
dotnet_diagnostic.CA1051.severity = suggestion # Do not declare visible instance fields
dotnet_diagnostic.CA1061.severity = warning    # Do not hide base class methods
dotnet_diagnostic.CA1063.severity = warning    # Implement IDisposable Correctly
dotnet_diagnostic.CA1064.severity = warning    # Exceptions should be public

# MAINTAINABILITY RULES - Reasonable limits
dotnet_diagnostic.CA1507.severity = suggestion # Use nameof to express symbol names
dotnet_diagnostic.CA1508.severity = warning    # Avoid dead conditional code

# DISABLE OVERLY STRICT/NOISY RULES - Focus on practical development
dotnet_diagnostic.CA1014.severity = none       # Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1016.severity = none       # Mark assemblies with assembly version
dotnet_diagnostic.CA1062.severity = none       # Validate arguments (use nullable reference types instead)
dotnet_diagnostic.CA1707.severity = none       # Identifiers should not contain underscores (too strict)
dotnet_diagnostic.CA1710.severity = none       # Identifiers should have correct suffix (often wrong)
dotnet_diagnostic.CA1711.severity = none       # Identifiers should not have incorrect suffix (often wrong)
dotnet_diagnostic.CA1720.severity = none       # Identifier contains type name (sometimes necessary)
dotnet_diagnostic.CA1024.severity = none       # Use properties where appropriate (often wrong)

##########################
# .NET Code Style Rules - PRACTICAL PREFERENCES
##########################

# 'this.' preferences - Be practical, avoid clutter
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false

# Language keywords vs BCL types preferences - Use C# keywords for clarity
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion
dotnet_style_readonly_field = true:suggestion

# Expression-level preferences - Modern C# patterns that improve readability
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion

##########################
# C# Code Style Rules - MVVM FRIENDLY
##########################

[*.cs]

# var preferences - Be consistent and clear
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# Expression-bodied members - Use where it improves readability (good for MVVM properties)
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

# Pattern matching preferences - Modern C# patterns
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Null-checking preferences - Be safe
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Code block preferences - Always use braces for safety
csharp_prefer_braces = true:suggestion

##########################
# C# Formatting Rules - STANDARD STYLE
##########################

# New line preferences - Traditional C# style
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Space preferences - Standard formatting
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_around_binary_operators = before_and_after

##########################
# Naming Conventions - ESSENTIAL ONLY
##########################

# Interfaces should start with I
dotnet_naming_rule.interfaces_should_be_prefixed_with_i.severity = suggestion
dotnet_naming_rule.interfaces_should_be_prefixed_with_i.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_prefixed_with_i.style = I_prefix_style
dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_style.I_prefix_style.capitalization = pascal_case
dotnet_naming_style.I_prefix_style.required_prefix = I

# Types should be PascalCase
dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.types.applicable_kinds = class,struct,interface,enum
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Public members should be PascalCase
dotnet_naming_rule.public_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.public_members_should_be_pascal_case.symbols = public_members
dotnet_naming_rule.public_members_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.public_members.applicable_kinds = property,event,method
dotnet_naming_symbols.public_members.applicable_accessibilities = public
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion

# C# naming conventions
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.i_prefix_style.capitalization = pascal_case
dotnet_naming_style.i_prefix_style.required_prefix = I
dotnet_naming_style.t_prefix_style.capitalization = pascal_case
dotnet_naming_style.t_prefix_style.required_prefix = T

dotnet_naming_rule.interface_rule.style = i_prefix_style
dotnet_naming_rule.interface_rule.symbols = interface
dotnet_naming_rule.interface_rule.severity = suggestion

dotnet_naming_rule.type_rule.style = pascal_case_style
dotnet_naming_rule.type_rule.symbols = type
dotnet_naming_rule.type_rule.severity = suggestion

dotnet_naming_rule.method_rule.style = pascal_case_style
dotnet_naming_rule.method_rule.symbols = method
dotnet_naming_rule.method_rule.severity = suggestion

dotnet_naming_rule.property_rule.style = pascal_case_style
dotnet_naming_rule.property_rule.symbols = property
dotnet_naming_rule.property_rule.severity = suggestion

dotnet_naming_rule.field_rule.style = camel_case_style
dotnet_naming_rule.field_rule.symbols = field
dotnet_naming_rule.field_rule.severity = suggestion

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.type.applicable_kinds = class,struct,enum,delegate
dotnet_naming_symbols.method.applicable_kinds = method
dotnet_naming_symbols.property.applicable_kinds = property
dotnet_naming_symbols.field.applicable_kinds = field

# XAML files - WPF UI
[*.xaml]
indent_style = space
indent_size = 4
charset = utf-8
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true

# PowerShell scripts
[*.ps1]
charset = utf-8
end_of_line = crlf
insert_final_newline = true
indent_style = space
indent_size = 4
trim_trailing_whitespace = true

# JSON files
[*.json]
charset = utf-8
end_of_line = crlf
insert_final_newline = true
indent_style = space
indent_size = 2
trim_trailing_whitespace = true

# Markdown files
[*.md]
charset = utf-8
end_of_line = crlf
insert_final_newline = true
indent_style = space
indent_size = 2
trim_trailing_whitespace = true

# XML documentation and project files
[*.{xml,csproj,props,targets}]
charset = utf-8
end_of_line = crlf
insert_final_newline = true
indent_style = space
indent_size = 2
trim_trailing_whitespace = true

# Code analysis rules - WileyWidget specific
dotnet_diagnostic.SA1600.severity = none  # XML docs encouraged for public members
dotnet_diagnostic.SA1101.severity = none  # Prefix local calls with this
dotnet_diagnostic.SA1309.severity = none  # Field names should not begin with underscore
dotnet_diagnostic.SA1200.severity = none  # Using directives should be placed correctly
dotnet_diagnostic.SA1402.severity = none  # File may only contain a single type

# Prevent accidental nullable enable - WileyWidget guideline
build_property.Nullable = disable

# File header for new C# files (optional)
file_header_template = Copyright (c) {year} WileyWidget. All rights reserved.\n\nAuthor: {author}

# Build properties
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
